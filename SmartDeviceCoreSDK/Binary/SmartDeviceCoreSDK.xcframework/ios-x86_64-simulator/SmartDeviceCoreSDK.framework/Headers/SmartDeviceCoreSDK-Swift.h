#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef SMARTDEVICECORESDK_SWIFT_H
#define SMARTDEVICECORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import Photos;
@import UIKit;
#endif

#import <SmartDeviceCoreSDK/SmartDeviceCoreSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SmartDeviceCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// AP模式下的model
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14A4xAPModeModel")
@interface A4xAPModeModel : NSObject
- (nonnull instancetype)initWithAptoken:(NSString * _Nullable)aptoken liveSpeakerVolume:(NSInteger)liveSpeakerVolume recordingAudioToggleOn:(BOOL)recordingAudioToggleOn videoSecondsValues:(NSArray<NSNumber *> * _Nullable)videoSecondsValues OBJC_DESIGNATED_INITIALIZER;
/// AP Token
@property (nonatomic, copy) NSString * _Nullable aptoken;
/// AP模式下的对讲音量从这里处理
@property (nonatomic) NSInteger liveSpeakerVolume;
@property (nonatomic) BOOL recordingAudioToggleOn;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable videoSecondsValues;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AnalysisModelBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xAnalysisResponse")
@interface A4xAnalysisResponse : NSObject
- (nonnull instancetype)initWithDeviceName:(NSString * _Nullable)deviceName serialNumber:(NSString * _Nullable)serialNumber list:(NSArray<AnalysisModelBean *> * _Nullable)list OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSArray<AnalysisModelBean *> * _Nullable list;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20A4xAppGroupIdManager")
@interface A4xAppGroupIdManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xAppGroupIdManager * _Nonnull shared;)
+ (A4xAppGroupIdManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 更新推送新消息脚标
/// \param badge 如果为空自增 +1
///
- (void)updatePushBadgeWithBadge:(NSInteger)badge;
- (NSInteger)loadPushBadge SWIFT_WARN_UNUSED_RESULT;
- (void)insert_eventWithMsg:(NSString * _Nonnull)msg;
- (NSString * _Nonnull)getPushEventInfo SWIFT_WARN_UNUSED_RESULT;
- (void)setUserTokenWithToken:(NSString * _Nonnull)token;
- (NSString * _Nonnull)loadUserToken SWIFT_WARN_UNUSED_RESULT;
- (void)setBaseURLWithUrl:(NSString * _Nonnull)url;
- (NSString * _Nonnull)getBaseURL SWIFT_WARN_UNUSED_RESULT;
- (void)setTenantIdWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getTenantId SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNameWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getAppName SWIFT_WARN_UNUSED_RESULT;
- (void)setContryNoWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getCountryNo SWIFT_WARN_UNUSED_RESULT;
- (void)setLanguageWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getLanguage SWIFT_WARN_UNUSED_RESULT;
- (void)setBuildCommitIdWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getBuildCommitId SWIFT_WARN_UNUSED_RESULT;
- (void)setInvalidPushIdentifierWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getInvalidPushIdentifier SWIFT_WARN_UNUSED_RESULT;
- (void)setUserIdWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getUserId SWIFT_WARN_UNUSED_RESULT;
- (void)setNodeWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getNode SWIFT_WARN_UNUSED_RESULT;
- (void)setMagicPixAbilityWithValue:(NSString * _Nonnull)value;
- (NSString * _Nonnull)getMagicPixAbility SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK23A4xBaseAddressViewModel")
@interface A4xBaseAddressViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20A4xBaseBindInterface")
@interface A4xBaseBindInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseBindInterface * _Nonnull shared;)
+ (A4xBaseBindInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK29A4xBaseDeviceSettingInterface")
@interface A4xBaseDeviceSettingInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseDeviceSettingInterface * _Nonnull shared;)
+ (A4xBaseDeviceSettingInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17A4xBaseFormatTool")
@interface A4xBaseFormatTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseFormatTool * _Nonnull shared;)
+ (A4xBaseFormatTool * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20A4xBaseLiveInterface")
@interface A4xBaseLiveInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseLiveInterface * _Nonnull shared;)
+ (A4xBaseLiveInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14A4xBaseManager")
@interface A4xBaseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseManager * _Nonnull shared;)
+ (A4xBaseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocalStringWithKey:(NSString * _Nonnull)key param:(NSArray<NSString *> * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// 判断是不是Debug环境
/// @return Bool - true:是debug环境 false:不是debug环境
- (BOOL)checkIsDebug SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK24A4xBaseNetworkIotManager")
@interface A4xBaseNetworkIotManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xBaseOTAInterface")
@interface A4xBaseOTAInterface : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseOTAInterface * _Nonnull shared;)
+ (A4xBaseOTAInterface * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PHChange;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xBasePhotoManager")
@interface A4xBasePhotoManager : NSObject <PHPhotoLibraryChangeObserver>
/// This callback is invoked on an arbitrary serial queue. If you need this to be handled on a specific queue, you should redispatch appropriately
/// \param changeInstance 
///
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xBaseVideoImageTool")
@interface A4xBaseVideoImageTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xBaseVideoImageTool * _Nonnull shared;)
+ (A4xBaseVideoImageTool * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)saveThumbsImageWithKey:(NSString * _Nonnull)key image:(UIImage * _Nonnull)image;
- (void)removeThumbsImageWithKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xBaseWifiIotModel")
@interface A4xBaseWifiIotModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xBirdAnalysisConfig")
@interface A4xBirdAnalysisConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xBirdAnalysisPageType, open) {
/// 可能的品种
  A4xBirdAnalysisPageTypeBirdPossible = 0,
/// 鸟类详情页面
  A4xBirdAnalysisPageTypeBirdDetails = 1,
/// 鸟类反馈提交
  A4xBirdAnalysisPageTypeBirdCommit = 2,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK36A4xBirdAnalysisPushNotificationModel")
@interface A4xBirdAnalysisPushNotificationModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xBirdAnalysisWebRequestType, open) {
/// 鸟类图片
  A4xBirdAnalysisWebRequestTypeBirdImage = 0,
/// 鸟类描述
  A4xBirdAnalysisWebRequestTypeBirdDes = 1,
/// 鸟类多语言文案获取
  A4xBirdAnalysisWebRequestTypeBirdLanguages = 2,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16A4xCooldownModel")
@interface A4xCooldownModel : NSObject
- (nonnull instancetype)initWithCloseValue:(NSInteger)closeValue notCloseValues:(NSArray<NSNumber *> * _Nullable)notCloseValues deviceSupport:(BOOL)deviceSupport userEnable:(BOOL)userEnable value:(NSInteger)value OBJC_DESIGNATED_INITIALIZER;
/// 拍摄间隔相关信息
@property (nonatomic) NSInteger closeValue;
/// 拍摄间隔项
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable notCloseValues;
/// 设备是否支持拍摄间隔功能
@property (nonatomic) BOOL deviceSupport;
/// 用户是否开启拍摄间隔功能
@property (nonatomic) BOOL userEnable;
/// 当前间隔时间
@property (nonatomic) NSInteger value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xDeviceAPModeType, open) {
/// WiFi模式
  A4xDeviceAPModeTypeWiFi = 0,
/// AP模式
  A4xDeviceAPModeTypeAP = 1,
};

@class A4xSupportDoorBellRingModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xDeviceAudioModel")
@interface A4xDeviceAudioModel : NSObject
- (nonnull instancetype)initWithLiveAudioToggleOn:(BOOL)liveAudioToggleOn recordingAudioToggleOn:(BOOL)recordingAudioToggleOn liveSpeakerVolume:(NSInteger)liveSpeakerVolume doorBellRingKey:(NSInteger)doorBellRingKey supportDoorBellRingKey:(NSArray<A4xSupportDoorBellRingModel *> * _Nullable)supportDoorBellRingKey OBJC_DESIGNATED_INITIALIZER;
/// 直播收音开关
@property (nonatomic) BOOL liveAudioToggleOn;
/// 录像收音开关
@property (nonatomic) BOOL recordingAudioToggleOn;
/// 对讲音量
@property (nonatomic) NSInteger liveSpeakerVolume;
/// 当前默认的门铃铃音
@property (nonatomic) NSInteger doorBellRingKey;
/// 支持的所有的门铃铃音 数组
@property (nonatomic, copy) NSArray<A4xSupportDoorBellRingModel *> * _Nullable supportDoorBellRingKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xDeviceControlModel")
@interface A4xDeviceControlModel : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nullable)name rotate:(BOOL)rotate standby:(BOOL)standby stream:(NSString * _Nullable)stream audioType:(NSString * _Nullable)audioType whiteLight:(BOOL)whiteLight personDetect:(BOOL)personDetect supportMotionTrack:(BOOL)supportMotionTrack OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic) BOOL rotate;
@property (nonatomic) BOOL standby;
@property (nonatomic, copy) NSString * _Nullable stream;
@property (nonatomic, copy) NSString * _Nullable audioType;
@property (nonatomic) BOOL whiteLight;
@property (nonatomic) BOOL personDetect;
@property (nonatomic) BOOL supportMotionTrack;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK26A4xDeviceOtaCheckInfoModel")
@interface A4xDeviceOtaCheckInfoModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK27A4xDeviceResolutionDesModel")
@interface A4xDeviceResolutionDesModel : NSObject
- (nonnull instancetype)initWithResolution:(NSString * _Nullable)resolution resolutionLevel:(NSString * _Nullable)resolutionLevel resolutionDesc:(NSString * _Nullable)resolutionDesc OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable resolution;
@property (nonatomic, copy) NSString * _Nullable resolutionLevel;
@property (nonatomic, copy) NSString * _Nullable resolutionDesc;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xDeviceSDState, open) {
  A4xDeviceSDStateNormal = 0,
  A4xDeviceSDStateNodata = 100,
  A4xDeviceSDStateNoCard = 1,
  A4xDeviceSDStateFormat = 13,
  A4xDeviceSDStateNotSupport = 23,
  A4xDeviceSDStateFormating = 2,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK36A4xDeviceSettingFixedAttributesModel")
@interface A4xDeviceSettingFixedAttributesModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 设备序列号
@property (nonatomic, copy) NSString * _Nullable userSn;
/// 设备型号
@property (nonatomic, copy) NSString * _Nullable modelNo;
/// 对用户展示的设备型号
@property (nonatomic, copy) NSString * _Nullable displayModelNo;
/// 设备类别。摄像头1、门铃2…
@property (nonatomic) NSInteger modelCategory;
/// 设备供电类型(是否支持下电保活)
@property (nonatomic) NSInteger canStandBy;
/// 是否精确电量(是否有电量计)
@property (nonatomic) BOOL quantityCharge;
/// 无线mac地址
@property (nonatomic, copy) NSString * _Nullable macAddress;
/// 有线mac地址
@property (nonatomic, copy) NSString * _Nullable wiredMacAddress;
/// 设备图标
@property (nonatomic, copy) NSString * _Nullable icon;
/// 设备小图标
@property (nonatomic, copy) NSString * _Nullable smallIcon;
/// 是否支持OTA自动升级
@property (nonatomic) BOOL supportOtaAutoUpgrade;
@property (nonatomic) NSInteger activatedTime;
@property (nonatomic) NSInteger activated;
@property (nonatomic) NSInteger role;
@property (nonatomic, copy) NSString * _Nullable roleName;
@property (nonatomic) BOOL deviceSupportAlarm;
@property (nonatomic) NSInteger supportRecLamp;
@property (nonatomic) NSInteger supportVoiceVolume;
@property (nonatomic) NSInteger supportAlarmVolume;
@property (nonatomic) NSInteger supportLiveAudioToggle;
@property (nonatomic) NSInteger supportRecordingAudioToggle;
@property (nonatomic) NSInteger supportLiveSpeakerVolume;
@property (nonatomic) NSInteger supportAlarmWhenRemoveToggle;
@property (nonatomic) NSInteger supportDeviceCall;
@property (nonatomic) NSInteger supportChargeAutoPowerOn;
@property (nonatomic) BOOL supportNightVisionSwitch;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable nightVisionSensitivityOptions;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable nightVisionModeOptions;
@property (nonatomic) BOOL supportWhiteLight;
@property (nonatomic) BOOL supportIndoor;
@property (nonatomic) BOOL supportStarlightSensor;
@property (nonatomic) BOOL supportPirAi;
@end

@class ModifiableAnyAttribute;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK41A4xDeviceSettingModifiableAttributesModel")
@interface A4xDeviceSettingModifiableAttributesModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 模块名称
@property (nonatomic, copy) NSString * _Nullable name;
/// 类型
@property (nonatomic, copy) NSString * _Nullable type;
/// 是否展示该组件(后面可能不再是处理显示隐藏,而是修改颜色之类的)
@property (nonatomic) BOOL disabled;
/// value
@property (nonatomic, strong) ModifiableAnyAttribute * _Nullable value;
/// options
@property (nonatomic, strong) ModifiableAnyAttribute * _Nullable options;
/// 不可用的枚举
@property (nonatomic, strong) ModifiableAnyAttribute * _Nullable disabledOptions;
/// 区间范围
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable intRange;
@end

@class A4xSDCardModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK39A4xDeviceSettingRealTimeAttributesModel")
@interface A4xDeviceSettingRealTimeAttributesModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 设备是否在线。后端实时判断
@property (nonatomic) NSInteger online;
/// 0-默认。3-休眠中
@property (nonatomic) NSInteger deviceStatus;
/// 离线时间 1234567890
@property (nonatomic) NSInteger offlineTime;
/// 充电模式,AC充电、USB充电
@property (nonatomic) NSInteger chargingMode;
/// 是否正在充电
@property (nonatomic) NSInteger isCharging;
/// 当前电量值,百分比
@property (nonatomic) NSInteger batteryLevel;
/// 联网方式:wifi,有线,ap
@property (nonatomic) NSInteger deviceNetType;
/// wifi信号强度
@property (nonatomic) NSInteger signalStrength;
/// 当前wifi名称
@property (nonatomic, copy) NSString * _Nullable networkName;
/// ip地址
@property (nonatomic, copy) NSString * _Nullable ip;
/// wifi通道
@property (nonatomic) NSInteger wifiChannel;
/// 当前固件版本
@property (nonatomic, copy) NSString * _Nullable firmwareId;
@property (nonatomic, copy) NSString * _Nullable newestFirmwareId;
@property (nonatomic) NSInteger firmwareStatus;
/// 当前mcu版本
@property (nonatomic, copy) NSString * _Nullable mcuNumber;
/// 固件构建的git-sha值
@property (nonatomic, copy) NSString * _Nullable displayGitSha;
/// SD卡
@property (nonatomic, strong) A4xSDCardModel * _Nullable sdCard;
/// 白光灯
@property (nonatomic) NSInteger whiteLight;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK25A4xDeviceSettingUnitModel")
@interface A4xDeviceSettingUnitModel : NSObject
- (nonnull instancetype)initWithUnitId:(NSString * _Nullable)unitId text:(NSString * _Nullable)text url:(NSString * _Nullable)url at_leat:(NSInteger)at_leat at_most:(NSInteger)at_most checkables:(NSArray<NSString *> * _Nullable)checkables OBJC_DESIGNATED_INITIALIZER;
/// 位置/门铃铃音 id
@property (nonatomic, copy) NSString * _Nullable unitId;
/// 位置信息
@property (nonatomic, copy) NSString * _Nullable text;
/// 门铃铃音 试听url
@property (nonatomic, copy) NSString * _Nullable url;
/// 以下是CHECKBOX类型新增的解析字段
/// 针对CHECKBOX类型的values的最小数量
@property (nonatomic) NSInteger at_leat;
/// 针对CHECKBOX类型的values的最大数量
@property (nonatomic) NSInteger at_most;
/// CHECKBOX支持项
@property (nonatomic, copy) NSArray<NSString *> * _Nullable checkables;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19A4xDeviceSleepModel")
@interface A4xDeviceSleepModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xDeviceSupportModel")
@interface A4xDeviceSupportModel : NSObject
- (nonnull instancetype)initWithDeviceSupportResolution:(NSArray<NSString *> * _Nullable)deviceSupportResolution deviceSupportResolutionV1:(NSArray<A4xDeviceResolutionDesModel *> * _Nullable)deviceSupportResolutionV1 deviceSupportAlarm:(BOOL)deviceSupportAlarm deviceSupportMirrorFlip:(BOOL)deviceSupportMirrorFlip supportRecLamp:(NSInteger)supportRecLamp supportVoiceVolume:(NSInteger)supportVoiceVolume supportAlarmVolume:(NSInteger)supportAlarmVolume supportWebrtc:(NSInteger)supportWebrtc supportCryDetect:(NSInteger)supportCryDetect killKeepAlive:(BOOL)killKeepAlive deviceDormancySupport:(NSInteger)deviceDormancySupport p2pConnMgtStrategy:(NSInteger)p2pConnMgtStrategy supportLiveAudioToggle:(NSInteger)supportLiveAudioToggle supportRecordingAudioToggle:(NSInteger)supportRecordingAudioToggle supportLiveSpeakerVolume:(NSInteger)supportLiveSpeakerVolume supportAlarmWhenRemoveToggle:(NSInteger)supportAlarmWhenRemoveToggle supportDeviceCall:(NSInteger)supportDeviceCall supportMechanicalDingDong:(BOOL)supportMechanicalDingDong supportPirCooldown:(NSInteger)supportPirCooldown supportChargeAutoPowerOn:(NSInteger)supportChargeAutoPowerOn supportOtaAutoUpgrade:(BOOL)supportOtaAutoUpgrade supportRotateCalibration:(BOOL)supportRotateCalibration supportStarlightSensor:(BOOL)supportStarlightSensor supportMagicPix:(BOOL)supportMagicPix supportSdCardCooldown:(NSInteger)supportSdCardCooldown OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable deviceSupportResolution;
@property (nonatomic, copy) NSArray<A4xDeviceResolutionDesModel *> * _Nullable deviceSupportResolutionV1;
@property (nonatomic) BOOL deviceSupportAlarm;
@property (nonatomic) BOOL deviceSupportMirrorFlip;
@property (nonatomic) NSInteger supportRecLamp;
@property (nonatomic) NSInteger supportVoiceVolume;
@property (nonatomic) NSInteger supportAlarmVolume;
@property (nonatomic) NSInteger supportWebrtc;
@property (nonatomic) NSInteger supportCryDetect;
@property (nonatomic) BOOL killKeepAlive;
@property (nonatomic) NSInteger deviceDormancySupport;
@property (nonatomic) NSInteger p2pConnMgtStrategy;
/// v3.11 设备音量设置新增相关新需求
/// 是否支持 直播收音
@property (nonatomic) NSInteger supportLiveAudioToggle;
/// 是否支持 录像收音
@property (nonatomic) NSInteger supportRecordingAudioToggle;
/// 是否支持 对讲音量
@property (nonatomic) NSInteger supportLiveSpeakerVolume;
@property (nonatomic) NSInteger supportAlarmWhenRemoveToggle;
@property (nonatomic) NSInteger supportDeviceCall;
@property (nonatomic) BOOL supportMechanicalDingDong;
/// 是否支持拍摄间隔功能
@property (nonatomic) NSInteger supportPirCooldown;
@property (nonatomic) NSInteger supportChargeAutoPowerOn;
@property (nonatomic) BOOL supportOtaAutoUpgrade;
@property (nonatomic) BOOL supportRotateCalibration;
@property (nonatomic) BOOL supportStarlightSensor;
@property (nonatomic) BOOL supportMagicPix;
@property (nonatomic) NSInteger supportSdCardCooldown;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK32A4xDeviceUpdateProgressInfoModel")
@interface A4xDeviceUpdateProgressInfoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class A4xDownloadModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18A4xDownloadManager")
@interface A4xDownloadManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xDownloadManager * _Nonnull shared;)
+ (A4xDownloadManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
- (void)initConfig SWIFT_METHOD_FAMILY(none);
/// download source
/// \param models sources models
/// isShare: true, share download
///
- (void)downloadSourceWithList:(NSArray<A4xDownloadModel *> * _Nonnull)list isShare:(BOOL)isShare onProgress:(void (^ _Nonnull)(NSInteger, NSInteger, float, NSString * _Nonnull))onProgress downloadItemComple:(void (^ _Nonnull)(BOOL, NSArray<A4xDownloadModel *> * _Nullable))downloadItemComple onFinish:(void (^ _Nonnull)(BOOL))onFinish;
/// stop all cancel and end tasks
- (void)stopDownload;
- (void)cancelDownloadWithUrlStr:(NSString * _Nullable)urlStr;
@end

@class NSURL;

/// A model class for saving data parsed from a media file.
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16A4xDownloadModel")
@interface A4xDownloadModel : NSObject
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nullable)serialNumber deviceName:(NSString * _Nullable)deviceName m3uUrl:(NSURL * _Nullable)m3uUrl name:(NSString * _Nullable)name tsArr:(NSArray<NSURL *> * _Nullable)tsArr totalSize:(NSInteger)totalSize m3uUri:(NSURL * _Nullable)m3uUri mediaType:(NSInteger)mediaType videoUrl:(NSString * _Nullable)videoUrl downloadTaskPath:(NSString * _Nullable)downloadTaskPath downloadOutputPath:(NSString * _Nullable)downloadOutputPath isShare:(BOOL)isShare OBJC_DESIGNATED_INITIALIZER;
/// device serial number
@property (nonatomic, copy) NSString * _Nullable serialNumber;
/// device name
@property (nonatomic, copy) NSString * _Nullable deviceName;
/// The media file’s source URL.
@property (nonatomic, copy) NSURL * _Nullable m3uUrl;
/// Name of media file.
@property (nonatomic, copy) NSString * _Nullable name;
/// An array of names of sliced ​​videos parsed from the contents of the file.
@property (nonatomic, copy) NSArray<NSURL *> * _Nullable tsArr;
/// The total size of all sliced ​​videos.
@property (nonatomic) NSInteger totalSize;
/// The media file’s source path.
@property (nonatomic, copy) NSURL * _Nullable m3uUri;
/// media type  1,m3u; 0,mp4
@property (nonatomic) NSInteger mediaType;
/// media  videoUrl
@property (nonatomic, copy) NSString * _Nullable videoUrl;
/// download success path
@property (nonatomic, copy) NSString * _Nullable downloadTaskPath;
/// download output path
@property (nonatomic, copy) NSString * _Nullable downloadOutputPath;
/// download is share
@property (nonatomic) BOOL isShare;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11A4xGCDTimer")
@interface A4xGCDTimer : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xGCDTimer * _Nonnull shared;)
+ (A4xGCDTimer * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xLibraryDeleteModel")
@interface A4xLibraryDeleteModel : NSObject
- (nonnull instancetype)initWithRemoved:(NSInteger)removed failed:(NSArray<NSNumber *> * _Nonnull)failed failedTraceIdList:(NSArray<NSString *> * _Nonnull)failedTraceIdList OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSInteger removed;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull failed;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull failedTraceIdList;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xLibraryResourcesType, open) {
  A4xLibraryResourcesTypeVideo = 1,
  A4xLibraryResourcesTypeImage = 2,
};

typedef SWIFT_ENUM(NSInteger, A4xLibraryVideoAiTagType, open) {
  A4xLibraryVideoAiTagTypeDevice_call = 1,
  A4xLibraryVideoAiTagTypeDoorbell_press = 2,
  A4xLibraryVideoAiTagTypeDoorbell_remove = 3,
  A4xLibraryVideoAiTagTypeBird = 4,
  A4xLibraryVideoAiTagTypePerson = 5,
  A4xLibraryVideoAiTagTypePackage = 6,
  A4xLibraryVideoAiTagTypePet = 7,
  A4xLibraryVideoAiTagTypeVehicle = 8,
  A4xLibraryVideoAiTagTypeCry = 9,
  A4xLibraryVideoAiTagTypePackage_drop_off = 10,
  A4xLibraryVideoAiTagTypePackage_pick_up = 11,
  A4xLibraryVideoAiTagTypePackage_exist = 12,
  A4xLibraryVideoAiTagTypeVehicle_enter = 13,
  A4xLibraryVideoAiTagTypeVehicle_out = 14,
  A4xLibraryVideoAiTagTypeVehicle_held_up = 15,
};

typedef SWIFT_ENUM(NSInteger, A4xLibraryVideoFromType, open) {
  A4xLibraryVideoFromTypeAuto = 1,
  A4xLibraryVideoFromTypeUser = 2,
};

typedef SWIFT_ENUM(NSInteger, A4xLibraryVideoMediaType, open) {
  A4xLibraryVideoMediaTypeMp4 = 0,
  A4xLibraryVideoMediaTypeM3u8 = 1,
};

typedef SWIFT_ENUM(NSInteger, A4xLibraryVideoReadStateType, open) {
  A4xLibraryVideoReadStateTypeUnread = 0,
  A4xLibraryVideoReadStateTypeRead = 1,
  A4xLibraryVideoReadStateTypeMark = 2,
};

@class NSCoder;
@class UIView;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17A4xLivePlayerView")
@interface A4xLivePlayerView : UIScrollView <UIScrollViewDelegate>
- (void)removeFromSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
@property (nonatomic) CGRect frame;
- (void)layoutSubviews;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11A4xLockTool")
@interface A4xLockTool : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK13A4xNetManager")
@interface A4xNetManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) A4xNetManager * _Nonnull engine;)
+ (A4xNetManager * _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
+ (void)setEngine:(A4xNetManager * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)requestURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)requestToken SWIFT_WARN_UNUSED_RESULT;
@end


@interface A4xNetManager (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (NSString * _Nonnull)getCountry SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getToken SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK23A4xObjcLibraryDateState")
@interface A4xObjcLibraryDateState : NSObject
@property (nonatomic) NSInteger dateTimestamp;
@property (nonatomic) NSInteger count;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK25A4xObjcLibraryDeleteModel")
@interface A4xObjcLibraryDeleteModel : NSObject
@property (nonatomic) NSInteger removed;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull failed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class A4xObjcLibraryVideoTagsModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK29A4xObjcLibraryEventVideoModel")
@interface A4xObjcLibraryEventVideoModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull videoEventKey;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval endTime;
@property (nonatomic) float period;
@property (nonatomic, copy) NSString * _Nonnull deviceName;
@property (nonatomic, copy) NSString * _Nonnull imageUrl;
@property (nonatomic, copy) NSString * _Nonnull videoUrls;
@property (nonatomic, strong) A4xObjcLibraryVideoTagsModel * _Nullable tags;
@property (nonatomic) NSInteger libraryCount;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger marked;
@property (nonatomic, copy) NSString * _Nonnull libraryIds;
@property (nonatomic) int64_t adminId;
@property (nonatomic) BOOL manager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK30A4xObjcLibraryNormalVideoModel")
@interface A4xObjcLibraryNormalVideoModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull resourceId;
@property (nonatomic) NSInteger missing;
@property (nonatomic) NSInteger mark;
@property (nonatomic) NSInteger type;
@property (nonatomic) NSInteger from;
@property (nonatomic) NSTimeInterval time;
@property (nonatomic, copy) NSString * _Nonnull cName;
@property (nonatomic, copy) NSString * _Nonnull cID;
@property (nonatomic, copy) NSString * _Nonnull date;
@property (nonatomic, copy) NSString * _Nonnull image;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSString * _Nonnull tags;
@property (nonatomic) BOOL manager;
@property (nonatomic, copy) NSString * _Nonnull managerName;
@property (nonatomic) float period;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nonnull locationName;
@property (nonatomic, copy) NSURL * _Nonnull videoURL;
@property (nonatomic) int64_t adminId;
@property (nonatomic, copy) NSString * _Nonnull pushInfo;
@property (nonatomic, copy) NSString * _Nonnull traceId;
@property (nonatomic) NSInteger fileSize;
@property (nonatomic, copy) NSString * _Nonnull eventInfo;
@property (nonatomic, copy) NSString * _Nonnull packageEventInfo;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull eventInfoList;
@property (nonatomic) BOOL adminIsVip;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK28A4xObjcLibraryVideoTagsModel")
@interface A4xObjcLibraryVideoTagsModel : NSObject
@property (nonatomic) NSInteger person;
@property (nonatomic) NSInteger pet;
@property (nonatomic) NSInteger vehicle;
@property (nonatomic) NSInteger package;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 播放展示类型
typedef SWIFT_ENUM(NSInteger, A4xObjcPlayerDisplayType, open) {
  A4xObjcPlayerDisplayTypeSplit = 0,
  A4xObjcPlayerDisplayTypeVertical = 1,
  A4xObjcPlayerDisplayTypeLandscape = 2,
  A4xObjcPlayerDisplayTypeAzone = 3,
  A4xObjcPlayerDisplayTypeAzoneFull = 4,
  A4xObjcPlayerDisplayTypeRectbox = 5,
  A4xObjcPlayerDisplayTypeBox = 6,
  A4xObjcPlayerDisplayTypePeopleBox = 7,
  A4xObjcPlayerDisplayTypeInstall = 8,
  A4xObjcPlayerDisplayTypeSd = 9,
  A4xObjcPlayerDisplayTypeSdFull = 10,
};

enum A4xSDVideoError : NSInteger;
@class A4xObjcVideoActionModel;
enum A4xObjcPlayerStateType : NSInteger;

/// 直播代理回调模型
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18A4xObjcPlayerModel")
@interface A4xObjcPlayerModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull error;
@property (nonatomic, strong) UIImage * _Nonnull thumbImage;
@property (nonatomic) BOOL isFork;
@property (nonatomic) enum A4xSDVideoError sdError;
@property (nonatomic, strong) UIImage * _Nonnull tipIcon;
@property (nonatomic) NSInteger code;
@property (nonatomic, strong) A4xObjcVideoActionModel * _Nonnull action;
@property (nonatomic, copy) NSString * _Nonnull reconnect;
@property (nonatomic) enum A4xObjcPlayerStateType playState;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xObjcPlayerParamKey, open) {
  A4xObjcPlayerParamKeyAi = 0,
  A4xObjcPlayerParamKeyAiId = 1,
  A4xObjcPlayerParamKeyVideoScale = 2,
  A4xObjcPlayerParamKeyLookWhite = 3,
};

typedef SWIFT_ENUM(NSInteger, A4xObjcPlayerRecordState, open) {
  A4xObjcPlayerRecordStateStart = 0,
  A4xObjcPlayerRecordStateEnd = 1,
  A4xObjcPlayerRecordStateStartError = 2,
  A4xObjcPlayerRecordStateEndError = 3,
};

typedef SWIFT_ENUM(NSInteger, A4xObjcPlayerStateType, open) {
  A4xObjcPlayerStateTypeNone = 0,
  A4xObjcPlayerStateTypeLoading = 1,
  A4xObjcPlayerStateTypePlaying = 2,
  A4xObjcPlayerStateTypePaused = 3,
  A4xObjcPlayerStateTypeFinish = 4,
  A4xObjcPlayerStateTypeError = 5,
  A4xObjcPlayerStateTypeUnuse = 6,
  A4xObjcPlayerStateTypeUpdating = 7,
};


/// webRTC回复的模型
/// 这里只回调了replaySeek类型的数据
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22A4xObjcReplaySeekModel")
@interface A4xObjcReplaySeekModel : NSObject
@property (nonatomic, copy) NSString * _Nullable action;
@property (nonatomic) int64_t timeStamp;
@property (nonatomic) int64_t seekTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SD卡模型
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18A4xObjcSDPlayModel")
@interface A4xObjcSDPlayModel : NSObject
- (nonnull instancetype)initWithTime:(NSTimeInterval)time end:(NSTimeInterval)end hasData:(BOOL)hasData audio:(BOOL)audio OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSTimeInterval time;
@property (nonatomic) NSTimeInterval end;
@property (nonatomic) BOOL hasData;
@property (nonatomic) BOOL audio;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xObjcUIRresetRotate")
@interface A4xObjcUIRresetRotate : NSObject
@property (nonatomic) float pitch;
@property (nonatomic) float yaw;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xObjcVideoAction, open) {
  A4xObjcVideoActionVideo = 0,
  A4xObjcVideoActionUpgrade = 1,
  A4xObjcVideoActionSetting = 2,
  A4xObjcVideoActionRefresh = 3,
  A4xObjcVideoActionSleepPlan = 4,
};

enum A4xVideoButtonStyle : NSInteger;

/// 直播动作模型
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK23A4xObjcVideoActionModel")
@interface A4xObjcVideoActionModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic) enum A4xVideoButtonStyle buttonstyle;
@property (nonatomic) enum A4xObjcVideoAction action;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xObjcVideoSharpType, open) {
  A4xObjcVideoSharpTypeStandard_1 = 0,
  A4xObjcVideoSharpTypeStandard_2 = 1,
  A4xObjcVideoSharpTypeStandard_3 = 2,
  A4xObjcVideoSharpTypeHb = 3,
  A4xObjcVideoSharpTypeVideo_2k_1 = 4,
  A4xObjcVideoSharpTypeVideo_2k_2 = 5,
  A4xObjcVideoSharpTypeVideo_2k_3 = 6,
  A4xObjcVideoSharpTypeVideo_4k_1 = 7,
  A4xObjcVideoSharpTypeVideo_4k_2 = 8,
  A4xObjcVideoSharpTypeAuto = 9,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21A4xObjcVideoTimeModel")
@interface A4xObjcVideoTimeModel : NSObject
@property (nonatomic) int64_t start;
@property (nonatomic) int64_t end;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK29A4xObjcVideoTimeModelResponse")
@interface A4xObjcVideoTimeModelResponse : NSObject
@property (nonatomic, copy) NSArray<A4xObjcVideoTimeModel *> * _Nullable videoSlices;
@property (nonatomic, strong) A4xObjcVideoTimeModel * _Nullable earliestVideoSlice;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 发送命令错误码
typedef SWIFT_ENUM(NSInteger, A4xObjcWebRtcCmdError, open) {
/// 设备无sdcard或者被拔除
  A4xObjcWebRtcCmdErrorSdNoExist = 0,
/// 设备无录像文件
  A4xObjcWebRtcCmdErrorSDNoVideo = 1,
/// sdcard格式不支持，需要格式化
  A4xObjcWebRtcCmdErrorSdNeedFormat = 2,
/// 当前正在有人观看录像
  A4xObjcWebRtcCmdErrorVideoLimit = 3,
/// 未知错误
  A4xObjcWebRtcCmdErrorUnKnow = 4,
};

typedef SWIFT_ENUM(NSInteger, A4xPlayerRecordState, open) {
  A4xPlayerRecordStateStart = 0,
  A4xPlayerRecordStateStartError = 1,
  A4xPlayerRecordStateEnd = 2,
  A4xPlayerRecordStateEndError = 3,
};

typedef SWIFT_ENUM(NSInteger, A4xPlayerStopReason, open) {
  A4xPlayerStopReasonNone = 0,
  A4xPlayerStopReasonClick = 1,
  A4xPlayerStopReasonPull = 2,
  A4xPlayerStopReasonChangePage = 3,
  A4xPlayerStopReasonEnterbackground = 4,
  A4xPlayerStopReasonChangeMode = 5,
  A4xPlayerStopReasonLogout = 6,
  A4xPlayerStopReasonLiveToplimit = 7,
  A4xPlayerStopReasonLiveSplitNumlimit = 8,
  A4xPlayerStopReasonLiveChangeDevice = 9,
  A4xPlayerStopReasonLocalNetLimit = 10,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14A4xPresetModel")
@interface A4xPresetModel : NSObject
- (nonnull instancetype)initWithThumbnailUrl:(NSString * _Nullable)thumbnailUrl rotationPointName:(NSString * _Nullable)rotationPointName presetId:(NSInteger)presetId coordinate:(NSString * _Nullable)coordinate serialNumber:(NSString * _Nullable)serialNumber OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable thumbnailUrl;
@property (nonatomic, copy) NSString * _Nullable rotationPointName;
@property (nonatomic) NSInteger presetId;
@property (nonatomic, copy) NSString * _Nullable coordinate;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18A4xReIdImagesModel")
@interface A4xReIdImagesModel : NSObject
@property (nonatomic, copy) NSString * _Nullable reIdImageid;
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xResolutionActionStyle, open) {
  A4xResolutionActionStyleStart = 0,
  A4xResolutionActionStyleNoThanks = 1,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14A4xSDCardModel")
@interface A4xSDCardModel : NSObject
- (nonnull instancetype)initWithFormatStatus:(NSInteger)formatStatus total:(float)total used:(float)used OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSInteger formatStatus;
@property (nonatomic) float total;
@property (nonatomic) float used;
- (enum A4xDeviceSDState)state SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// SDK模块主题
typedef SWIFT_ENUM(NSInteger, A4xSDKModuleType, open) {
/// 直播
  A4xSDKModuleTypeLive = 0,
/// 相册
  A4xSDKModuleTypeLibrary = 1,
/// 我的
  A4xSDKModuleTypeMine = 2,
/// 设置
  A4xSDKModuleTypeSetting = 3,
};

typedef SWIFT_ENUM(NSInteger, A4xSDKThemeType, open) {
/// 默认
  A4xSDKThemeTypeDefault = 0,
/// 主题一
  A4xSDKThemeTypeTheme1 = 1,
};

@class HaveRecordDayResponse;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK23A4xSDStateModelResponse")
@interface A4xSDStateModelResponse : NSObject
- (nonnull instancetype)initWithVideoInfo:(NSArray<HaveRecordDayResponse *> * _Nullable)videoInfo OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSArray<HaveRecordDayResponse *> * _Nullable videoInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xSDVideoError, open) {
/// idle
  A4xSDVideoErrorNone = 0,
/// 设备无sdcard或者被拔除
  A4xSDVideoErrorSdNoExist = 1,
/// 设备无录像文件
  A4xSDVideoErrorSDNoVideo = 2,
/// sdcard格式不支持，需要格式化
  A4xSDVideoErrorSdNeedFormat = 3,
/// 当前正在有人观看录像
  A4xSDVideoErrorVideoLimit = 4,
/// 未知错误
  A4xSDVideoErrorUnKnow = 5,
/// 本地网络未开
  A4xSDVideoErrorLocalNetLimit = 6,
};

typedef SWIFT_ENUM(NSInteger, A4xSourceFrom, open) {
  A4xSourceFromMotion = 1,
  A4xSourceFromCamera = 2,
};

typedef SWIFT_ENUM(NSInteger, A4xSourceOther, open) {
  A4xSourceOtherUnread = 1,
  A4xSourceOtherMark = 2,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK27A4xSupportDoorBellRingModel")
@interface A4xSupportDoorBellRingModel : NSObject
- (nonnull instancetype)initWithRingId:(NSInteger)ringId url:(NSString * _Nullable)url OBJC_DESIGNATED_INITIALIZER;
/// 门铃铃音Id
@property (nonatomic) NSInteger ringId;
/// 门铃铃音地址
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK13A4xThemeModel")
@interface A4xThemeModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, A4xVideoButtonStyle, open) {
  A4xVideoButtonStyleTheme = 0,
  A4xVideoButtonStyleLine = 1,
  A4xVideoButtonStyleNone = 2,
};

enum A4xVideoTag : NSInteger;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK26A4xVideoLibraryFilterModel")
@interface A4xVideoLibraryFilterModel : NSObject
- (nonnull instancetype)initWithOnlyDisplayZonePointsources:(NSDictionary<NSString *, NSString *> * _Nullable)onlyDisplayZonePointsources saveZonePointsources:(NSDictionary<NSString *, NSArray<NSNumber *> *> * _Nullable)saveZonePointsources fromType:(NSInteger)fromType otherType:(NSInteger)otherType videoTag:(NSInteger)videoTag videoEventKey:(NSString * _Nullable)videoEventKey OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable onlyDisplayZonePointsources;
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSNumber *> *> * _Nullable saveZonePointsources;
@property (nonatomic) NSInteger fromType;
@property (nonatomic) NSInteger otherType;
@property (nonatomic) NSInteger videoTag;
@property (nonatomic, copy) NSString * _Nullable videoEventKey;
- (BOOL)isSelectWithTag:(enum A4xVideoTag)tag SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelectFrom:(enum A4xSourceFrom)from SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelectDisplayZoneIdWithDeviceId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelectAllZoneIdWithDeviceId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelectWithOther:(enum A4xSourceOther)other SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)filterTagAllDeviceId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)tags SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)bellTags SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceCallEventTag SWIFT_WARN_UNUSED_RESULT;
- (void)change_selectWithTag:(enum A4xVideoTag)tag;
- (void)change_selectFrom:(enum A4xSourceFrom)from;
- (void)changeSelectZoneIdToDisplayWithDeviceName:(NSString * _Nonnull)name deviceId:(NSString * _Nonnull)id;
- (void)changeSelectZoneIdToSaveWithDeviceZoneId:(NSInteger)deviceZoneId deviceId:(NSString * _Nonnull)deviceId type:(NSInteger)type;
- (void)change_selectWithOther:(enum A4xSourceOther)other;
- (void)clearAll;
- (void)clearAllDisplayZoneIdsWithDeviceId:(NSString * _Nullable)deviceId isAllSub:(BOOL)isAllSub;
- (BOOL)isEmpty SWIFT_WARN_UNUSED_RESULT;
+ (void)getWithBlock:(void (^ _Nonnull)(A4xVideoLibraryFilterModel * _Nonnull))block;
+ (void)saveWithModel:(A4xVideoLibraryFilterModel * _Nonnull)model;
- (void)save;
+ (void)clear;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, A4xVideoTag, open) {
  A4xVideoTagPerson = 1,
  A4xVideoTagPet = 2,
  A4xVideoTagVehicle = 4,
  A4xVideoTagCry = 8,
  A4xVideoTagBox = 16,
  A4xVideoTagPackage_drop_off = 32,
  A4xVideoTagPackage_pick_up = 64,
  A4xVideoTagPackage_exist = 128,
  A4xVideoTagVehicle_enter = 256,
  A4xVideoTagVehicle_out = 512,
  A4xVideoTagVehicle_held_up = 1024,
  A4xVideoTagDevice_call = 2048,
  A4xVideoTagDoorbell_press = 4096,
  A4xVideoTagDoorbell_remove = 8192,
  A4xVideoTagBird = 16384,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK24A4xWebSocketMessageModel")
@interface A4xWebSocketMessageModel : NSObject
/// 消息类型 (请求/回复)
@property (nonatomic, copy) NSString * _Nonnull messageType;
/// 消息id (请求)
@property (nonatomic, copy) NSString * _Nonnull messageId;
/// LOGIN uid用户唯一标识 (请求)
@property (nonatomic, copy) NSString * _Nonnull uid;
/// CHANGE_AP_PASSWORD 密码 (请求),密码为空时说明不设置
@property (nonatomic, copy) NSString * _Nonnull password;
/// SET_TIME 时间戳 (请求)
@property (nonatomic) NSInteger utcTime;
/// SET_TIME 时间偏移量,东八区 480 (请求)
@property (nonatomic) NSInteger timeZone;
/// SET_TIME 时区 (请求)
@property (nonatomic, copy) NSString * _Nonnull timeZoneArea;
/// SET_TIME 从后端获取的夏令时 (请求)
@property (nonatomic) NSInteger dst;
/// socket回复的消息id (回复),对应messageId
@property (nonatomic, copy) NSString * _Nonnull requestId;
/// 回复的结果(回复)
@property (nonatomic, copy) NSString * _Nonnull result;
/// 成功失败原因(回复)
@property (nonatomic, copy) NSString * _Nonnull reason;
/// LOGIN/LOGIN_RESPONSE成功后回复的token(回复/请求),后续用来作为请求设备信息的入参
@property (nonatomic, copy) NSString * _Nonnull token;
/// GET_INFO_RESPONSE成功后返回的设备信息Dictionary(回复)
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull info;
/// GET_INFO_RESPONSE成功后返回的设备设置信息Dictionary(回复)
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull settings;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK23A4xWebSocketMessageTool")
@interface A4xWebSocketMessageTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) A4xWebSocketMessageTool * _Nonnull shared;)
+ (A4xWebSocketMessageTool * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收到了回复的消息,该方法只负责装载数据(透传) -> A4xWebSocketMessageModel
/// 可以在此方法内实现埋点功能
/// 后续需要在外部处理数据和交互逻辑
/// @param message : 接收到的回复的jsonString
- (A4xWebSocketMessageModel * _Nonnull)receiveMessageWithMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class A4xObjcWebRtcPlayer;
@class NSData;

@interface A4xWebSocketMessageTool (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <A4xSignalConnDelegate>
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onSignalMsg:(NSData * _Nonnull)msg;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onState:(A4xSignalConnState)state;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onError:(int32_t)errCode errMsg:(NSString * _Null_unspecified)errMsg;
@end


SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK21AccountChangeListener_")
@protocol AccountChangeListener
/// account info error occured,
/// -1022: not login
/// -1023: token expired
/// -1024: other login
/// -1025: token missing
- (void)onAccountInfoErrorWithStatus:(NSInteger)status;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17AiBirdSettingBean")
@interface AiBirdSettingBean : NSObject
- (nonnull instancetype)initWithAiAnalyzeSwitch:(BOOL)aiAnalyzeSwitch aiNotifySwitch:(BOOL)aiNotifySwitch OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17AnalysisModelBean")
@interface AnalysisModelBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol IBindtateListener;
@class BindDeviceModel;
enum BindType : NSInteger;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK8BindCore")
@interface BindCore : NSObject
+ (BindCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 设置监听
- (void)setListenerWithBindStateListener:(id <IBindtateListener> _Nonnull)bindStateListener;
/// 发现设备
- (void)discoverDeviceOnDiscoverDevice:(void (^ _Nonnull)(BindDeviceModel * _Nonnull))onDiscoverDevice onDiscoverError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onDiscoverError;
/// 停止发现设备
- (void)stopDiscoverDevice;
/// 开始绑定
- (void)startBindWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword bindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel type:(enum BindType)type onStepChange:(void (^ _Nonnull)(NSInteger))onStepChange onGenarateQrCode:(void (^ _Nonnull)(UIImage * _Nullable))onGenarateQrCode onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// <ul>
///   <li>
///     0 扫码绑定方法：<code>BindType = QR(0)</code>
///   </li>
///   <li>
///     摄像机设备通过扫描App上生成的二维码方式来绑定
///   </li>
/// </ul>
- (void)startBindByQRCodeWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword onStepChange:(void (^ _Nonnull)(NSInteger))onStepChange onGenarateQrCode:(void (^ _Nonnull)(UIImage * _Nullable))onGenarateQrCode onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// <ul>
///   <li>
///     1 AP无线绑定方法：<code>BindType = WIRELESS(1)</code>
///   </li>
///   <li>
///     蓝牙辅助发现设备，再通过连接设备AP方式来绑定。
///   </li>
/// </ul>
- (void)startBindByApWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword bindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel onStepChange:(void (^ _Nonnull)(NSInteger))onStepChange onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// <ul>
///   <li>
///     2 有线绑定方法：<code>BindType = WIRE(2)</code>
///   </li>
///   <li>
///     蓝牙辅助发现设备，再通过有线方式来绑定。无需输入Wi-Fi信息
///   </li>
/// </ul>
- (void)startBindByWireWithBindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel onStepChange:(void (^ _Nonnull)(NSInteger))onStepChange onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// <ul>
///   <li>
///     3 AP直连绑定
///   </li>
///   <li>
///     通常采用蓝牙广播发现设备，再通过App和设备Ap热点直接连接使用
///   </li>
/// </ul>
- (void)startBindByApDirectWithBindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel onStepChange:(void (^ _Nonnull)(NSInteger))onStepChange onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 停止绑定
- (void)stopBind;
/// 蓝牙是否开启权限
- (BOOL)isBlePermissionGranted SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙是否打开
- (BOOL)isBleOpen SWIFT_WARN_UNUSED_RESULT;
/// 蓝牙实例化
- (void)bleInit;
/// 判断蓝牙是否可用
- (BOOL)bleAuthAndOpenIsReady SWIFT_WARN_UNUSED_RESULT;
- (void)bleScan;
- (void)bleStop;
- (void)bleDeinit;
@end


@interface BindCore (SWIFT_EXTENSION(SmartDeviceCoreSDK))
/// 开始绑定
- (void)startBindWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword bindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel type:(enum BindType)type;
/// <ul>
///   <li>
///     0 扫码绑定方法：<code>BindType = QR(0)</code>
///   </li>
///   <li>
///     摄像机设备通过扫描App上生成的二维码方式来绑定
///   </li>
/// </ul>
- (void)startBindByQRCodeWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword;
/// <ul>
///   <li>
///     1 AP无线绑定方法：<code>BindType = WIRELESS(1)</code>
///   </li>
///   <li>
///     蓝牙辅助发现设备，再通过连接设备AP方式来绑定。
///   </li>
/// </ul>
- (void)startBindByApWithSsid:(NSString * _Nullable)ssid ssidPassword:(NSString * _Nullable)ssidPassword bindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel;
/// <ul>
///   <li>
///     2 有线绑定方法：<code>BindType = WIRE(2)</code>
///   </li>
///   <li>
///     蓝牙辅助发现设备，再通过有线方式来绑定。无需输入Wi-Fi信息
///   </li>
/// </ul>
- (void)startBindByWireWithBindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel;
/// <ul>
///   <li>
///     3 AP直连绑定
///   </li>
///   <li>
///     通常采用蓝牙广播发现设备，再通过App和设备Ap热点直接连接使用
///   </li>
/// </ul>
- (void)startBindByApDirectWithBindDeviceModel:(BindDeviceModel * _Nullable)bindDeviceModel;
@end

enum BleAuthEnum : NSInteger;

@interface BindCore (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (void)onBleAuthStateChangeWithState:(enum BleAuthEnum)state;
- (void)onDiscoverDevice:(BindDeviceModel * _Nonnull)model;
- (void)onStepChangeWithCode:(NSInteger)code;
- (void)onGenarateQrCodeWithNewQRCdoe:(UIImage * _Nullable)newQRCdoe oldQRCode:(UIImage * _Nullable)oldQRCode wireQRCode:(UIImage * _Nullable)wireQRCode;
- (void)onSuccessWithCode:(NSInteger)code msg:(NSString * _Nullable)msg serialNumber:(NSString * _Nullable)serialNumber;
- (void)onErrorWithCode:(NSInteger)code msg:(NSString * _Nullable)msg;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15BindDeviceModel")
@interface BindDeviceModel : NSObject
- (nonnull instancetype)initWithUserSn:(NSString * _Nullable)userSn serialNumber:(NSString * _Nullable)serialNumber modelNo:(NSString * _Nullable)modelNo displayModelNo:(NSString * _Nullable)displayModelNo apInfo:(NSString * _Nullable)apInfo multicastInfo:(NSString * _Nullable)multicastInfo smallIcon:(NSString * _Nullable)smallIcon icon:(NSString * _Nullable)icon apRuleTextDeviceStatePosition:(NSString * _Nullable)apRuleTextDeviceStatePosition networkModePosition:(NSString * _Nullable)networkModePosition supportApConnect:(NSInteger)supportApConnect defaultSupportApConnect:(NSInteger)defaultSupportApConnect supportApSetWifi:(NSInteger)supportApSetWifi defaultSupportApSetWifi:(NSInteger)defaultSupportApSetWifi subModuleTypePosition:(NSString * _Nullable)subModuleTypePosition subModuleErrCodePosition:(NSString * _Nullable)subModuleErrCodePosition apBitParamsPosition:(NSString * _Nullable)apBitParamsPosition macAddress:(NSString * _Nullable)macAddress wiredMacAddress:(NSString * _Nullable)wiredMacAddress net:(NSInteger)net OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable userSn;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable modelNo;
@property (nonatomic, copy) NSString * _Nullable displayModelNo;
@property (nonatomic, copy) NSString * _Nullable apInfo;
@property (nonatomic, copy) NSString * _Nullable multicastInfo;
@property (nonatomic, copy) NSString * _Nullable smallIcon;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, copy) NSString * _Nullable apRuleTextDeviceStatePosition;
@property (nonatomic, copy) NSString * _Nullable networkModePosition;
@property (nonatomic) NSInteger supportApConnect;
@property (nonatomic) NSInteger defaultSupportApConnect;
@property (nonatomic) NSInteger supportApSetWifi;
@property (nonatomic) NSInteger defaultSupportApSetWifi;
@property (nonatomic, copy) NSString * _Nullable subModuleTypePosition;
@property (nonatomic, copy) NSString * _Nullable subModuleErrCodePosition;
@property (nonatomic, copy) NSString * _Nullable apBitParamsPosition;
@property (nonatomic, copy) NSString * _Nullable macAddress;
@property (nonatomic, copy) NSString * _Nullable wiredMacAddress;
@property (nonatomic) NSInteger net;
- (BOOL)isWireless SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isWired SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNetConnected SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14BindNetworkAPI")
@interface BindNetworkAPI : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BindNetworkAPI * _Nonnull shared;)
+ (BindNetworkAPI * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)getBindCodeWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BindType, open) {
/// 扫码
  BindTypeQR = 0,
/// 无线
  BindTypeWIRELESS = 1,
/// 有线
  BindTypeWIRE = 2,
/// AP热点直连
  BindTypeAP_DIRECT = 3,
/// 全双工蓝牙
  BindTypeBLUETOOTH = 4,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK9BirdModel")
@interface BirdModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BirdSearchedModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17BirdRecognizeCore")
@interface BirdRecognizeCore : NSObject
+ (BirdRecognizeCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)getBirdInfoWithTraceId:(NSString * _Nonnull)traceId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<BirdModel *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)fuzzySearchBirdNameWithInputName:(NSString * _Nonnull)inputName limitNum:(NSInteger)limitNum onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<BirdSearchedModel *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)commitBirdNameWithTraceId:(NSString * _Nonnull)traceId inputName:(NSString * _Nonnull)inputName selectStdName:(NSString * _Nonnull)selectStdName possibleStdName:(NSString * _Nonnull)possibleStdName onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17BirdSearchedModel")
@interface BirdSearchedModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BleAuthEnum, open) {
  BleAuthEnumUnknown = 0,
  BleAuthEnumPoweredOn = 1,
  BleAuthEnumPoweredOff = 2,
  BleAuthEnumUnauthorized = 3,
};


SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK25BluetoothManagerInterface_")
@protocol BluetoothManagerInterface
@optional
- (BOOL)isBlePermissionGranted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isBleOpen SWIFT_WARN_UNUSED_RESULT;
- (void)bleInit;
- (void)bleScan;
- (void)bleStop;
- (void)bleDeinit;
@end

@protocol BluetoothManagerProtocol;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16BluetoothManager")
@interface BluetoothManager : NSObject <BluetoothManagerInterface>
@property (nonatomic, weak) id <BluetoothManagerProtocol> _Nullable protocol;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) BluetoothManager * _Nonnull share;)
+ (BluetoothManager * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
+ (void)setShare:(BluetoothManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (BOOL)isBlePermissionGranted SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isBleOpen SWIFT_WARN_UNUSED_RESULT;
- (void)bleInit;
- (void)bleScan;
- (void)bleStop;
- (void)bleDeinit;
@end

@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

@interface BluetoothManager (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// 从感兴趣的服务中，确认 我们所发现感兴趣的特征
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@class CBCentralManager;
@class NSNumber;

@interface BluetoothManager (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <CBCentralManagerDelegate>
- (void)centralManager:(CBCentralManager * _Nonnull)central willRestoreState:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (void)centralManager:(CBCentralManager * _Nonnull)central connectionEventDidOccur:(CBConnectionEvent)event forPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// 连接设备失败
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
/// 断开连接
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheralDidUpdateName:(CBPeripheral * _Nonnull)peripheral;
- (void)peripheralDidUpdateRSSI:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end



SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK24BluetoothManagerProtocol_")
@protocol BluetoothManagerProtocol
@optional
- (void)onBleDiscoverDeviceWithResStr:(NSString * _Nullable)resStr netMode:(NSString * _Nullable)netMode;
- (void)onBleBindResultWithResStr:(NSString * _Nullable)resStr code:(NSString * _Nullable)code;
- (void)onBleAuthResultWithRes:(enum BleAuthEnum)res;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14BluetoothModel")
@interface BluetoothModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK12CarMergeBean")
@interface CarMergeBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11CarReIdBean")
@interface CarReIdBean : NSObject
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable labelId;
@property (nonatomic, copy) NSString * _Nullable labelName;
@property (nonatomic, copy) NSString * _Nullable eventObject;
@property (nonatomic, copy) NSArray<A4xReIdImagesModel *> * _Nullable images;
@property (nonatomic, copy) NSString * _Nullable coverImageUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16CarRecognizeCore")
@interface CarRecognizeCore : NSObject
+ (CarRecognizeCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取用户视频相册中可能的所有车辆列表
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
/// @return models  : 返回model信息数组 [CarReIdBean]
- (void)getAllCarReidListOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<CarReIdBean *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 删除聚类
/// <hr/>
/// @param deleteLabelImages : deleteLabelImages 例如
/// {
/// “labelId1”: [“imageId1”, “imageId2”],
/// “labelId2”: [“imageId4”, “imageId6”]
/// }
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)deleteReidCarImageWithDeleteLabelImages:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)deleteLabelImages onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 标记聚类
/// <hr/>
/// @param markLabelIds : markLabelIds 例如
/// [“labelId1”, “labelId2”]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)markReidCarLabelWithMarkLabelIds:(NSArray<NSString *> * _Nonnull)markLabelIds onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 取消标记聚类
/// <hr/>
/// @param unmarkLabelIds : unmarkLabelIds 例如
/// [“labelId1”, “labelId2”]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)unmarkReidCarLabelWithUnmarkLabelIds:(NSArray<NSString *> * _Nonnull)unmarkLabelIds onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 合并聚类
/// <hr/>
/// @param merges : unmarkLabelIds 例如
/// [“labelId1”, “labelId2”]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)mergeReidCarLabelWithBeans:(NSArray<CarMergeBean *> * _Nonnull)beans onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 删除聚类
/// <hr/>
/// @param deleteLabelIds : deleteLabelIds 例如
/// [“labelId1”, “labelId2”]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)deleteReidCarLabelWithDeleteLabelIds:(NSArray<NSString *> * _Nonnull)deleteLabelIds onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 更新聚类名称
/// <hr/>
/// @param labelId   : id
/// @param labelName : name
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)updateReidCarLabelNameWithLabelId:(NSString * _Nonnull)labelId labelName:(NSString * _Nonnull)labelName onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11CustomParam")
@interface CustomParam : NSObject
- (nonnull instancetype)initWithVerifyDormancyPlan:(BOOL)verifyDormancyPlan isAPMode:(BOOL)isAPMode resolution:(NSString * _Nullable)resolution apToken:(NSString * _Nullable)apToken autoResolutionEnable:(BOOL)autoResolutionEnable live_player_type:(NSString * _Nullable)live_player_type videoScale:(NSInteger)videoScale playerNumber:(NSInteger)playerNumber lookWhite:(BOOL)lookWhite OBJC_DESIGNATED_INITIALIZER;
/// 是否校验设备当前在休眠计划,default:ture 在休眠计划中；门铃/一键呼叫为 false
@property (nonatomic) BOOL verifyDormancyPlan;
/// AP/WIFI network mode；默认 false
@property (nonatomic) BOOL isAPMode;
/// resolution 直播分辨率; 默认
@property (nonatomic, copy) NSString * _Nullable resolution;
/// AP 直连的token
@property (nonatomic, copy) NSString * _Nullable apToken;
/// 支持auto档
@property (nonatomic) BOOL autoResolutionEnable;
/// 直播类型
@property (nonatomic, copy) NSString * _Nullable live_player_type;
/// 视频缩放
@property (nonatomic) NSInteger videoScale;
/// 播放最大数量
@property (nonatomic) NSInteger playerNumber;
/// 白光灯设置ijkpalyer
@property (nonatomic) BOOL lookWhite;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NotificationConfigBean;
@class NotificationDetailBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK12DeviceAICore")
@interface DeviceAICore : NSObject
+ (DeviceAICore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 是否关闭设备通知
/// 先从 <code>DeviceBean.pushIgnored</code> 拿到是否开启了推送开关,这个接口是用来更新这个开关状态
/// public var pushIgnored   : Bool? // 设备推送是否已忽略
/// 如果 <code>pushIgnored == true</code>,说明推送被忽略(关闭),收不到推送,开关显示关闭
/// <hr/>
/// @param serialNumber : 设备Id
/// @param isClose      : 如果<code>isClose == true</code>,说明关闭设备推送
/// @param onSuccess    : 更新成功回调
/// @param onError      : 更新失败回调
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)closePushWithSerialNumber:(NSString * _Nonnull)serialNumber isClose:(BOOL)isClose onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 获取消息推送信息sdk版本
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return result  : 返回获取到的设备通知设置列表
/// @return message : 信息描述
- (void)getMessageNotificationConfigWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSArray<NotificationConfigBean *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 更新通知设置接口
/// <hr/>
/// @param serialNumber : 设备Id
/// @param bean         : NotificationConfigBean [“person”:[],“pet”:[],“vehicle”:[“vehicle_enter”,“vehicle_leave”],“package”:[“package_drop_off”,“package_pick_up”],“other”:[]]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)updateMessageNotificationWithSerialNumber:(NSString * _Nonnull)serialNumber bean:(NotificationDetailBean * _Nonnull)bean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 获取用户AI分析的配置
/// <hr/>
/// @param serialNumber : 设备Id
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
/// @return models  : 返回获取到的设备详细信息数组
- (void)getAnalysisEventConfigWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSArray<AnalysisModelBean *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 更新用户AI分析的配置
/// <hr/>
/// @param list         : 需要更新的AI对象数组 [AnalysisModelBean]
/// @param serialNumber : 需要更新的设备SN数组 [String]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)updateAnalysisEventConfigWithBeans:(NSArray<AnalysisModelBean *> * _Nonnull)beans serialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 查询合并消息推送开关
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
/// @return isOpen  : 合并推送开关状态
- (void)getMergePushDataOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSInteger))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 设置合并消息推送开关
/// <hr/>
/// @param isOpen : 开关
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)updateMergePushDataWithIsOpen:(NSInteger)isOpen onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 查询鸟类AI分析和通知设置
/// <hr/>
/// @param serialNumber : 设备序列号
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
/// @return result  : AiBirdSettingBean
- (void)getBirdAiSettingWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, AiBirdSettingBean * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 更新鸟类AI分析和通知设置
/// <hr/>
/// @param serialNumber : 序列号
/// @param bean :
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)updateBirdAiSettingWithSerialNumber:(NSString * _Nonnull)serialNumber bean:(AiBirdSettingBean * _Nonnull)bean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK12DeviceAIUtil")
@interface DeviceAIUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ZoneBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22DeviceActivityZoneCore")
@interface DeviceActivityZoneCore : NSObject
+ (DeviceActivityZoneCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取所有的AZ虚拟围栏
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
/// @return model   : AZ虚拟围栏信息模型
- (void)getAllZonesListWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<ZoneBean *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 添加AZ虚拟围栏
/// <hr/>
/// @param zone : ZoneBean
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)addActivityZoneWithZone:(ZoneBean * _Nonnull)zone onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 更新AZ虚拟围栏
/// <hr/>
/// @param zone : ZoneBean
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)updateActivityZoneWithZone:(ZoneBean * _Nonnull)zone onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 删除AZ虚拟围栏
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// @param zoneId   : 需要删除的AZ id
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)removeActivityZoneWithSerialNumber:(NSString * _Nonnull)serialNumber zoneId:(NSInteger)zoneId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20DeviceAttributesBean")
@interface DeviceAttributesBean : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, strong) A4xDeviceSettingFixedAttributesModel * _Nullable fixedAttributes;
@property (nonatomic, strong) A4xDeviceSettingRealTimeAttributesModel * _Nullable realTimeAttributes;
@property (nonatomic, copy) NSArray<A4xDeviceSettingModifiableAttributesModel *> * _Nullable modifiableAttributes;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK10DeviceBean")
@interface DeviceBean : NSObject
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable modelNo;
@property (nonatomic, copy) NSString * _Nullable displayModelNo;
@property (nonatomic, copy) NSString * _Nullable serialNo;
@property (nonatomic, copy) NSString * _Nullable macAddress;
@property (nonatomic) NSInteger batteryLevel;
@property (nonatomic) NSInteger awake;
@property (nonatomic) NSInteger signalStrength;
@property (nonatomic) NSInteger locationId;
@property (nonatomic, copy) NSString * _Nullable locationName;
@property (nonatomic) int64_t adminId;
@property (nonatomic) int64_t userId;
@property (nonatomic) NSInteger online;
@property (nonatomic) NSInteger deviceStatus;
@property (nonatomic, copy) NSString * _Nullable deviceDormancyMessage;
@property (nonatomic) NSInteger sleepPlan;
@property (nonatomic, copy) NSString * _Nullable networkName;
@property (nonatomic, copy) NSString * _Nullable mcuNumber;
@property (nonatomic, copy) NSString * _Nullable firmwareId;
@property (nonatomic, copy) NSString * _Nullable adminName;
@property (nonatomic, copy) NSString * _Nullable adminEmail;
@property (nonatomic, copy) NSString * _Nullable adminPhone;
@property (nonatomic) NSInteger upgradeStatus;
@property (nonatomic) float upgradeProgress;
@property (nonatomic, copy) NSString * _Nullable userSn;
@property (nonatomic) NSInteger isCharging;
@property (nonatomic, copy) NSString * _Nullable newestFirmwareId;
@property (nonatomic, copy) NSString * _Nullable deviceLanguage;
@property (nonatomic, copy) NSString * _Nullable timeZone;
@property (nonatomic, copy) NSArray<A4xPresetModel *> * _Nullable presetLocations;
@property (nonatomic, copy) NSString * _Nullable ip;
@property (nonatomic, copy) NSString * _Nullable resolution;
@property (nonatomic, strong) A4xSDCardModel * _Nullable sdCard;
@property (nonatomic, strong) A4xDeviceControlModel * _Nullable deviceContrl;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable deviceSupportLanguage;
@property (nonatomic, strong) A4xDeviceSupportModel * _Nullable deviceSupport;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, copy) NSString * _Nullable smallIcon;
@property (nonatomic, copy) NSString * _Nullable displayGitSha;
@property (nonatomic, copy) NSArray<ZoneBean *> * _Nullable zonePointList;
@property (nonatomic, copy) NSArray<NotificationConfigBean *> * _Nullable notificationConfigList;
@property (nonatomic, copy) NSArray<A4xAnalysisResponse *> * _Nullable list;
@property (nonatomic) BOOL birdAnalyzeSwitch;
@property (nonatomic) BOOL birdNotifySwitch;
@property (nonatomic, copy) NSString * _Nullable defaultCodec;
@property (nonatomic, copy) NSString * _Nullable codec;
@property (nonatomic) NSInteger deviceVipLevel;
/// 拍摄间隔模型
@property (nonatomic, strong) A4xCooldownModel * _Nullable cooldown;
/// AP 模式下的model
@property (nonatomic, strong) A4xAPModeModel * _Nullable apModeModel;
@property (nonatomic, copy) NSString * _Nullable settings;
@property (nonatomic, strong) BindDeviceModel * _Nullable bindDeviceModel;
@property (nonatomic, copy) NSString * _Nullable apInfo;
@property (nonatomic, copy) NSString * _Nullable wiredMacAddress;
@property (nonatomic) BOOL supportBirdVip;
@property (nonatomic) NSInteger deviceNetType;
/// 支持的所有的门铃铃音 数组
@property (nonatomic, copy) NSArray<A4xSupportDoorBellRingModel *> * _Nullable supportDoorBellRingKey;
/// 3.12 pir灵敏度修改,原来是写死,现在通过后端获取
/// [1,2,3] [高,中,低]
/// [1,2,3,4] [高,中,低,自动]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable motionSensitivityOptionList;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable chargeAutoPowerOnCapacityOptions;
@property (nonatomic) BOOL deviceInVip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DeviceBean (SWIFT_EXTENSION(SmartDeviceCoreSDK))
@property (nonatomic, readonly) BOOL isWebRtcDevice;
- (BOOL)isDoorBell SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportVoiceEffect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)deviceSupportMagicPix SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFourByThree SWIFT_WARN_UNUSED_RESULT;
- (BOOL)checkApModeSetpassword SWIFT_WARN_UNUSED_RESULT;
- (A4xSDCardModel * _Nullable)sdTCard SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportSD SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasSdCardAndSupport SWIFT_WARN_UNUSED_RESULT;
- (void)upgradeDone;
- (BOOL)supportSdCooldown SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supperBatter SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportRecLamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportVoiceVolume SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportAlarmVolume SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportSleepPlan SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportMotionTrack SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportWiFiLevel SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceCGB SWIFT_WARN_UNUSED_RESULT;
/// 获取设备状态字符串
/// 门铃线(离线前)/(关机前)
/// USB(离线前)/(关机前)
- (NSString * _Nonnull)getDeviceStateString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)deviceStateStr SWIFT_WARN_UNUSED_RESULT;
- (enum A4xDeviceSDState)sdcardState SWIFT_WARN_UNUSED_RESULT;
- (BOOL)supportAutoResolution SWIFT_WARN_UNUSED_RESULT;
- (DeviceBean * _Nullable)newCopyWithModel:(DeviceBean * _Nonnull)model error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getRrecLamp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)canUpdateWithFirmwareStatus:(NSInteger)firmwareStatus SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUpdating SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isForceUpdate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSuggestUpdate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAdmin SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)doorBellRings SWIFT_WARN_UNUSED_RESULT;
@end

@class DeviceLocationModel;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18DeviceLocationCore")
@interface DeviceLocationCore : NSObject
+ (DeviceLocationCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 用户位置列表
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)getUserDeviceLocationListOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSArray<DeviceLocationModel *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 添加用户位置
/// @param locationId : 位置id
/// @param adminId    : 用户id
/// @param name       : 位置name
/// @param country    : 国家 (没有的话传空字符串)
/// @param city       : 城市 (没有的话传空字符串)
/// @param state      : state (没有的话传空字符串)
/// @param district   : 街道 (没有的话传空字符串)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)createUserDeviceLocationWithBean:(DeviceLocationModel * _Nonnull)bean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, DeviceLocationModel * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 更新用户位置
/// @param locationId : 位置id
/// @param adminId    : 用户id
/// @param name       : 位置name
/// @param country    : 国家 (没有的话传空字符串)
/// @param city       : 城市 (没有的话传空字符串)
/// @param state      : state (没有的话传空字符串)
/// @param district   : 街道 (没有的话传空字符串)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)updateUserDeviceLocationWithBean:(DeviceLocationModel * _Nonnull)bean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, DeviceLocationModel * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 删除用户位置
/// @param locationId : 位置id
/// @param adminId    : 用户id
/// @param name       : 位置name
/// @param country    : 国家 (没有的话传空字符串)
/// @param city       : 城市 (没有的话传空字符串)
/// @param state      : state (没有的话传空字符串)
/// @param district   : 街道 (没有的话传空字符串)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)deleteUserDeviceLocationWithLocation_id:(NSInteger)location_id onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19DeviceLocationModel")
@interface DeviceLocationModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18DeviceLocationUtil")
@interface DeviceLocationUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16DeviceManageCore")
@interface DeviceManageCore : NSObject
+ (DeviceManageCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取所有已经绑定设备的方法
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return models  : 返回获取到的设备详细信息数组
/// @return message : 返回信息描述
- (void)queryDeviceListOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, NSArray<DeviceBean *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 获取某个设备详细信息的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细信息
/// @return message : 信息描述
- (void)querySingleDeviceInfoWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, DeviceBean * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 获取某个设备详细配置的方法
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return model   : 返回获取到的设备详细配置
/// @return message : 信息描述
- (void)getDeviceSettingConfigWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, DeviceBean * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onError;
/// 通过deviceId更新某个设备的设备名称
/// <hr/>
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param deviceName : 需要修改的新设备名称(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)updateDeviceNameWithSerialNumber:(NSString * _Nonnull)serialNumber deviceName:(NSString * _Nonnull)deviceName comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
/// 通过deviceId删除某个设备
/// <hr/>
/// @param deviceId : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)deleteDeviceWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16DeviceManageUtil")
@interface DeviceManageUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ModifiableAttributes;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17DeviceSettingCore")
@interface DeviceSettingCore : NSObject
+ (DeviceSettingCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取设备属性接口,该接口是所有数据的接口,调用可以拿到 <code>getFixedAttributes</code> <code>getRealTimeAttributes</code> 和 <code>getModifiableAttributes</code> 全部的数据
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)getAttributeWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, DeviceAttributesBean * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 获取设备属性接口,该接口是所有数据的接口,调用可以拿到想要的数据
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)getAttributeWithReturnFixedAttributes:(BOOL)returnFixedAttributes returnRealTimeAttributes:(BOOL)returnRealTimeAttributes returnModifiableAttributes:(BOOL)returnModifiableAttributes serialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, DeviceAttributesBean * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 获取设备基本固定属性接口
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)getFixedAttributesWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, DeviceAttributesBean * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 获取设备基本实时属性接口
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)getRealTimeAttributesWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, DeviceAttributesBean * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 获取设备可修改属性接口,同时可以处理UI展示
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)getModifiableAttributesWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, DeviceAttributesBean * _Nonnull, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 更新设备属性接口
/// @param serialNumber   : 设备Id,唯一标识(必传)
/// @param modifiableAttributes : [ModifiableAttributes]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)updateAttributeWithSerialNumber:(NSString * _Nonnull)serialNumber name:(NSString * _Nonnull)name value:(id _Nonnull)value onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 更新设备属性接口
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param modifiableAttributes : [ModifiableAttributes]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)updateAttributeWithSerialNumber:(NSString * _Nonnull)serialNumber modifiableAttributes:(NSArray<ModifiableAttributes *> * _Nonnull)modifiableAttributes onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 云台校准接口
/// <hr/>
/// @param serialNumber    : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)getRotateCalibrationStatusWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSInteger))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 开始云台校准
/// <hr/>
/// @param serialNumber    : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 信息描述
- (void)startRotateCalibrationWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 门铃机械铃声试听
/// <hr/>
/// @param serialNumber   : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
- (void)doorBellDingDongAuditionWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21DeviceSettingCoreUtil")
@interface DeviceSettingCoreUtil : NSObject
/// <hr/>
/// 更新设备属性接口
/// @param deviceId   : 设备Id,唯一标识(必传)
/// @param modifiableAttributes : [ModifiableAttributes]
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 错误信息描述
+ (void)updateModifiableAttributesWithDeviceId:(NSString * _Nonnull)deviceId modifiableAttributes:(NSArray<ModifiableAttributes *> * _Nonnull)modifiableAttributes comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))comple;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ShareDeviceBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15DeviceShareCore")
@interface DeviceShareCore : NSObject
+ (DeviceShareCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取分享的二维码
/// <hr/>
/// @param serialNumber : 需要分享的设备Id
/// <hr/>
/// @return code        : 错误码 0-成功 其他-失败
/// @return message     : 返回信息描述
/// @return shareId     : 返回需要展示的分享id,需要通过该id生成进行分享,后续不管是二维码分享还是其他均由用户自己操作
/// @return expireTime  : 过期时间
- (void)startPreShareDeviceByAdminWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSString * _Nonnull, NSInteger))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 扫码后分享者请求绑定
/// <hr/>
/// @param shareId  : 扫码后获取到的shareId
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)startShareDeviceByUserWithShareId:(NSString * _Nonnull)shareId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 主设备获取所有申请绑定的信息列表
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
/// @return models  : 返回所有申请绑定的请求数据列表
- (void)queryPreShareDeviceInfoOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<ShareDeviceBean *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 主设备处理申请分享绑定的信息（关闭、接受、拒绝）
/// <hr/>
/// @param operationId : 111, 操作ID
/// @param targetId    : 111, 被分享者id
/// @param status      :  -2:关闭 -1:拒绝 0:接受
/// @param shareId     : 分享id
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)handleShareDeviceInfoWithOperationId:(NSInteger)operationId targetId:(NSInteger)targetId status:(NSInteger)status shareId:(NSString * _Nonnull)shareId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 删除分享
/// <hr/>
/// @param serialNumber : 设备Id
/// @param deleteUserId : 要删除的用户Id
/// <hr/>
/// @return code    : 错误码 0-成功 其他-失败
/// @return message : 返回信息描述
- (void)deleteShareUserWithSerialNumber:(NSString * _Nonnull)serialNumber deleteUserId:(NSInteger)deleteUserId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19DeviceSleepPlanBean")
@interface DeviceSleepPlanBean : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable planStartDay;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19DeviceSleepPlanCore")
@interface DeviceSleepPlanCore : NSObject
+ (DeviceSleepPlanCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 获取休眠计划列表
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
/// @return sleepPlanModels : 休眠计划列表
- (void)getSleepPlanListWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<DeviceSleepPlanBean *> * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 创建休眠计划
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// @param planModel    : 休眠计划模型
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
/// A4xDeviceSleepPlanBean
- (void)creatSleepPlanWithSerialNumber:(NSString * _Nonnull)serialNumber planBean:(DeviceSleepPlanBean * _Nonnull)planBean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 编辑休眠计划
/// <hr/>
/// @param serialNumber : 设备Id,唯一标识(必传)
/// @param planBean     : 休眠计划模型
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)editSleepPlanWithSerialNumber:(NSString * _Nonnull)serialNumber planBean:(DeviceSleepPlanBean * _Nonnull)planBean onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 删除休眠计划
/// <hr/>
/// @param period           : period
/// @param serialNumber     : 设备Id,唯一标识(必传)
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)deleteSleepPlanWithPeriod:(NSInteger)period serialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 手动让设备是否进入休眠
/// <hr/>
/// @param serialNumber     : 设备Id,唯一标识(必传)
/// @param enable           : true: 休眠 false: 不休眠
/// <hr/>
/// @return code            : 错误码 0-成功 其他-失败
/// @return message         : 信息描述
- (void)setSleepWithSerialNumber:(NSString * _Nonnull)serialNumber enable:(BOOL)enable onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19DeviceSleepPlanUtil")
@interface DeviceSleepPlanUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18FeedBackOptionBean")
@interface FeedBackOptionBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FilterAiSubTag;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK16FilterAiEventTag")
@interface FilterAiEventTag : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<FilterAiSubTag *> * _Nullable subTags;
- (nonnull instancetype)initWithName:(NSString * _Nullable)name subTags:(NSArray<FilterAiSubTag *> * _Nullable)subTags OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14FilterAiSubTag")
@interface FilterAiSubTag : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11FilterEntry")
@interface FilterEntry : NSObject
@property (nonatomic) BOOL isFromSDCard;
@property (nonatomic) NSInteger marked;
@property (nonatomic) NSInteger missing;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable serialNumbers;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic) NSInteger from;
@property (nonatomic) NSInteger to;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, copy) NSString * _Nullable remark;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable traceIdList;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable codes;
@property (nonatomic, copy) NSString * _Nullable traceId;
@property (nonatomic, copy) NSString * _Nullable videoEventKey;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable doorbellTags;
@property (nonatomic, copy) NSString * _Nullable deviceCallEventTag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20FilterTagDeviceModel")
@interface FilterTagDeviceModel : NSObject
- (nonnull instancetype)initWithSerialNumber:(NSString * _Nullable)serialNumber isBind:(BOOL)isBind roleId:(NSInteger)roleId deviceName:(NSString * _Nullable)deviceName modelCategory:(NSInteger)modelCategory OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic) BOOL isBind;
@property (nonatomic) NSInteger roleId;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic) NSInteger modelCategory;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21HaveRecordDayResponse")
@interface HaveRecordDayResponse : NSObject
@property (nonatomic) BOOL hasVideo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK17IBindtateListener_")
@protocol IBindtateListener
@optional
/// 监听蓝牙权限发生改变回调
- (void)onBleAuthStateChangeWithState:(enum BleAuthEnum)state;
/// 发现设备或设备数据更新
- (void)onDiscoverDevice:(BindDeviceModel * _Nonnull)model;
/// 绑定过程中Step变更时回调
- (void)onStepChangeWithCode:(NSInteger)code;
/// 生成二维码图片时回调
- (void)onGenarateQrCodeWithNewQRCdoe:(UIImage * _Nullable)newQRCdoe oldQRCode:(UIImage * _Nullable)oldQRCode wireQRCode:(UIImage * _Nullable)wireQRCode;
@required
/// 绑定成功时回调
- (void)onSuccessWithCode:(NSInteger)code msg:(NSString * _Nullable)msg serialNumber:(NSString * _Nullable)serialNumber;
@optional
/// 绑定错误回调
- (void)onErrorWithCode:(NSInteger)code msg:(NSString * _Nullable)msg;
@end

@class ReportInfo;

SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK18ILiveStateListener_")
@protocol ILiveStateListener
@optional
/// 设置渲染视图
- (void)onRenderViewWithSurfaceView:(UIView * _Nonnull)surfaceView;
/// 播放器状态变化时调用
/// 0-准备中; 1-无网络; 2-设备离线; 3-低电量; 4-点击关机; 5-弱电关机; 6-设备休眠 ; 7-固件正在升级; 8-固件强制升级;9-固件建议升级;10-直播中;11-暂停 ;12-直播服务超时;13-直播观看人数已达上限，请稍后重试;14-出图失败 ;15-AP未连接;16-无权限访问
- (void)onPlayerStateWithStateCode:(NSInteger)stateCode msg:(NSString * _Nonnull)msg;
/// 下载速度更新时调用
- (void)onDownloadSpeedUpdateWithSpeed:(NSString * _Nonnull)speed;
/// 调试信息回调，提供额外的详细信息
- (void)onDebugWithDic:(NSDictionary * _Nonnull)dic;
/// 接收到麦克风帧时调用
- (void)onMicFrameWithData:(NSArray<NSNumber *> * _Nonnull)data;
/// 接收到设备消息推送时调用
/// networklow-1,live_viewers_limit-2,“设备无sdcard或者被拔除” - -1, “设备无录像文件” - -2,“sdcard格式不支持，需要格式化” - -3, “当前正在有人观看录像” - -4, “未知错误” - -5,
/// localNetLimit-3
- (void)onDeviceMsgPushWithCode:(NSInteger)code;
/// 接收到报告时调用
- (void)onReportWithReportTopic:(NSString * _Nonnull)reportTopic info:(ReportInfo * _Nonnull)info;
/// 夜视增强实时状态回调
- (void)onMagicPixProcessStateWithStatus:(NSInteger)status;
/// 录像状态回调
- (void)onRecordStateWithState:(NSInteger)state videoPath:(NSString * _Nonnull)videoPath;
/// sd卡回看当前播放时间回调
- (void)onCurrentSdRecordTimeWithTime:(NSTimeInterval)time;
/// 夜视增强直播流回调
- (void)onProcessVideoStream_yuv:(uint8_t * _Null_unspecified)y u:(uint8_t * _Null_unspecified)u v:(uint8_t * _Null_unspecified)v w:(int32_t)frameWidth h:(int32_t)frameHeight cb:(VideoStreamAlgorithmCallback _Null_unspecified)callback;
/// 夜视增强直播封面回调
- (void)onProcessImage:(uint8_t * _Null_unspecified)inputImageData w:(int32_t)imageWidth h:(int32_t)imageHeight cb:(ImageAlgorithmCallBack _Null_unspecified)callback;
@end

@protocol LoggerDelegate;
@class InitSDKConfig;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17InitConfigBuilder")
@interface InitConfigBuilder : NSObject
- (nonnull instancetype)setTenantId:(NSString * _Nonnull)tenantId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setCountryNo:(NSString * _Nonnull)countryNo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setIsDebug:(BOOL)isDebug SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setLoggerDelegate:(id <LoggerDelegate> _Nullable)loggerDelegate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setAccountChangeListener:(id <AccountChangeListener> _Nullable)accountListener SWIFT_WARN_UNUSED_RESULT;
- (InitSDKConfig * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// SDK初始化错误码
typedef SWIFT_ENUM(NSInteger, InitErrorType, open) {
/// 成功
  InitErrorTypeSuccess = 0,
/// 没有传 AppToken
  InitErrorTypeNoAppToken = 1,
/// 没有传 TenantId
  InitErrorTypeNoTenantId = 2,
/// 没有传 语言
  InitErrorTypeNoLanguage = 3,
/// 没有传 国家
  InitErrorTypeNoCountryNo = 4,
/// 没有传 选择网络节点
  InitErrorTypeNoNodeType = 5,
/// 获取用户信息失败
  InitErrorTypeGetInfoFailed = 6,
/// 获取用户信息失败
  InitErrorTypeNoMatchedNode = 7,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK13InitSDKConfig")
@interface InitSDKConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 租户ID，用于标识特定的租户。
@property (nonatomic, copy) NSString * _Nullable tenantId;
/// 应用程序的语言设置。详见文档语言编码
@property (nonatomic, copy) NSString * _Nullable language;
/// 应用程序所在的国家代码。详见文档国家编码
@property (nonatomic, copy) NSString * _Nullable countryNo;
/// 是否是 Debug 环境，Debug 环境会走 staging 服务
@property (nonatomic) BOOL isDebug;
/// sets the logger delegate that receive logs from the sdk.
@property (nonatomic, strong) id <LoggerDelegate> _Nullable loggerDelegate;
/// listen the account info change
@property (nonatomic, strong) id <AccountChangeListener> _Nullable accountChangeListener;
@end

@class LibraryStatusListBean;
@class LibraryEventDetailBean;
@class LibraryEventDatabean;
@class RecordBean;
@class TagBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK11LibraryCore")
@interface LibraryCore : NSObject
+ (LibraryCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)rtcconnectionOpenWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onFail;
- (void)rtcconnectionCloseWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onFail;
- (void)getLibraryStatusWithFilterEntry:(FilterEntry * _Nonnull)filterEntry onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<LibraryStatusListBean *> * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (void)getVideosByFilterWithFilterEntry:(FilterEntry * _Nonnull)filterEntry onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, LibraryEventDetailBean * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onFail;
- (void)getEventRecordByFilterWithFilterEntry:(FilterEntry * _Nonnull)filterEntry onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, LibraryEventDatabean * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nullable))onFail;
- (void)getEventDetailWithIsFromSDCard:(BOOL)isFromSDCard videoEventKey:(NSString * _Nonnull)videoEventKey onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, LibraryEventDetailBean * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (void)setMarkStatusWithMarked:(NSInteger)marked traceId:(NSString * _Nonnull)traceId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, BOOL))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (void)setReadStatusWithMissing:(NSInteger)missing traceId:(NSString * _Nonnull)traceId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, BOOL))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (void)loadSingleLibraryInfoWithMsgId:(NSString * _Nonnull)msgId comple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, RecordBean * _Nullable))comple;
- (void)fetchZoneImagesWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<ZoneBean *> * _Nullable))comple;
- (void)fetchAllDeviceWhichHasVideoWithComple:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, NSArray<DeviceBean *> * _Nullable))comple;
- (void)queryVideoSearchOptionWithIsFromSDCard:(BOOL)isFromSDCard serialNumber:(NSString * _Nullable)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, TagBean * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
/// download source
/// \param models sources models
///
- (void)downloadSourceWithTasks:(NSArray<RecordBean *> * _Nonnull)tasks isShare:(BOOL)isShare onProgress:(void (^ _Nonnull)(NSInteger, NSInteger, float, NSString * _Nonnull))onProgress onFinish:(void (^ _Nonnull)(BOOL, NSArray<NSString *> * _Nullable, void (^ _Nonnull)(void)))onFinish;
@end

@class RecordEventBean;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20LibraryEventDatabean")
@interface LibraryEventDatabean : NSObject
@property (nonatomic, copy) NSArray<RecordEventBean *> * _Nullable list;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22LibraryEventDetailBean")
@interface LibraryEventDetailBean : NSObject
- (nonnull instancetype)initWithTotal:(NSInteger)total list:(NSArray<RecordBean *> * _Nullable)list OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSInteger total;
@property (nonatomic, copy) NSArray<RecordBean *> * _Nullable list;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK21LibraryStatusListBean")
@interface LibraryStatusListBean : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable date;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK20LiveAllStateProtocol_")
@protocol LiveAllStateProtocol
/// 设置渲染视图
- (void)onRenderViewWithDeviceId:(NSString * _Nonnull)deviceId surfaceView:(UIView * _Nonnull)surfaceView;
/// 播放器状态变化时调用
/// 0-准备中; 1-无网络; 2-设备离线; 3-低电量; 4-点击关机; 5-弱电关机; 6-设备休眠 ; 7-固件正在升级; 8-固件强制升级;9-固件建议升级;10-直播中;11-暂停 ;12-直播服务超时;13-直播观看人数已达上限，请稍后重试;14-出图失败 ;15-AP未连接;16-无权限访问
- (void)onPlayerStateWithDeviceId:(NSString * _Nonnull)deviceId stateCode:(NSInteger)stateCode;
/// 下载速度更新时调用
- (void)onDownloadSpeedUpdateWithDeviceId:(NSString * _Nonnull)deviceId speed:(NSString * _Nonnull)speed;
/// 调试信息回调，提供额外的详细信息
- (void)onDebugWithDeviceId:(NSString * _Nonnull)deviceId dic:(NSDictionary * _Nonnull)dic;
/// 接收到麦克风帧时调用
- (void)onMicFrameWithDeviceId:(NSString * _Nonnull)deviceId data:(NSArray<NSNumber *> * _Nonnull)data;
/// 接收到设备消息推送时调用
- (void)onDeviceMsgPushWithDeviceId:(NSString * _Nonnull)deviceId code:(NSInteger)code;
/// 接收到报告时调用
- (void)onReportWithDeviceId:(NSString * _Nonnull)deviceId reportTopic:(NSString * _Nonnull)reportTopic info:(ReportInfo * _Nonnull)info;
/// 夜视增强实时状态回调
- (void)onMagicPixProcessStateWithDeviceId:(NSString * _Nonnull)deviceId status:(NSInteger)status;
/// 录像状态回调
- (void)onRecordStateWithDeviceId:(NSString * _Nonnull)deviceId state:(NSInteger)state videoPath:(NSString * _Nonnull)videoPath;
/// sd卡回看当前播放时间回调
- (void)onCurrentSdRecordTimeWithDeviceId:(NSString * _Nonnull)deviceId time:(NSTimeInterval)time;
@end

@class NSPointerArray;

SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19LiveManagerInstance")
@interface LiveManagerInstance : NSObject
+ (LiveManagerInstance * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) NSPointerArray * _Nonnull playerStateChangeList;
@property (nonatomic) NSInteger playerNumber;
@end


@interface LiveManagerInstance (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (void)stopOtherLiveWithSkipDeviceId:(NSString * _Nonnull)skipDeviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam comple:(void (^ _Nonnull)(NSInteger))comple;
@end


@interface LiveManagerInstance (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <LiveAllStateProtocol>
- (void)onRenderViewWithDeviceId:(NSString * _Nonnull)deviceId surfaceView:(UIView * _Nonnull)surfaceView;
- (void)onPlayerStateWithDeviceId:(NSString * _Nonnull)deviceId stateCode:(NSInteger)stateCode;
- (void)onDownloadSpeedUpdateWithDeviceId:(NSString * _Nonnull)deviceId speed:(NSString * _Nonnull)speed;
- (void)onDebugWithDeviceId:(NSString * _Nonnull)deviceId dic:(NSDictionary * _Nonnull)dic;
- (void)onMicFrameWithDeviceId:(NSString * _Nonnull)deviceId data:(NSArray<NSNumber *> * _Nonnull)data;
- (void)onDeviceMsgPushWithDeviceId:(NSString * _Nonnull)deviceId code:(NSInteger)code;
- (void)onReportWithDeviceId:(NSString * _Nonnull)deviceId reportTopic:(NSString * _Nonnull)reportTopic info:(ReportInfo * _Nonnull)info;
- (void)onMagicPixProcessStateWithDeviceId:(NSString * _Nonnull)deviceId status:(NSInteger)status;
- (void)onRecordStateWithDeviceId:(NSString * _Nonnull)deviceId state:(NSInteger)state videoPath:(NSString * _Nonnull)videoPath;
- (void)onCurrentSdRecordTimeWithDeviceId:(NSString * _Nonnull)deviceId time:(NSTimeInterval)time;
@end

@protocol LivePlayer;
@class VideoTimeModel;
@class VideoTimeModelResponse;

@interface LiveManagerInstance (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (id <LivePlayer> _Nullable)creatLivePlayerWithSerialNumber:(NSString * _Nonnull)serialNumber customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (void)startLiveWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)startRecordWithDeviceId:(NSString * _Nonnull)deviceId path:(NSString * _Nonnull)path customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)stopRecordWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)screenShotWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, UIImage * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)audioEnableWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)speakEnableWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)changeVoiceWithDeviceId:(NSString * _Nonnull)deviceId type:(NSInteger)type customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)switchHandsetAndSpeakerWithDeviceId:(NSString * _Nonnull)deviceId isHandset:(BOOL)isHandset customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setAlarmWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setResolutionWithDeviceId:(NSString * _Nonnull)deviceId ratio:(NSString * _Nonnull)ratio customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)autoResolutionSwitchEnableWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)magicPixEnableWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setWhiteLightWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPtzWithDeviceId:(NSString * _Nonnull)deviceId x:(float)x y:(float)y customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)addPreLocationPointWithDeviceId:(NSString * _Nonnull)deviceId name:(NSString * _Nonnull)name image:(UIImage * _Nonnull)image customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xPresetModel * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)deletePreLocationPointWithDeviceId:(NSString * _Nonnull)deviceId pointId:(NSInteger)pointId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)getPreLocationPointsWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSArray<A4xPresetModel *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPreLocationPointWithDeviceId:(NSString * _Nonnull)deviceId coordinate:(NSString * _Nonnull)coordinate customParam:(NSDictionary<NSString *, id> * _Nullable)customParam onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)stopLiveWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)destroyLiveWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)getSdHasVideoDaysWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSTimeInterval)startTime videoslices:(NSArray<VideoTimeModel *> * _Nullable)videoslices customParam:(NSDictionary<NSString *, id> * _Nullable)customParam comple:(void (^ _Nonnull)(A4xSDStateModelResponse * _Nullable))comple SWIFT_DEPRECATED_MSG("SDK 2.0 End-of-life");
- (void)getSDVideoListWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSTimeInterval)startTime stopTime:(NSTimeInterval)stopTime customParam:(NSDictionary<NSString *, id> * _Nullable)customParam :(void (^ _Nonnull)(VideoTimeModelResponse * _Nonnull, enum A4xSDVideoError))completionCallback SWIFT_DEPRECATED_MSG("SDK 2.0 End-of-life");
- (void)startSdcardWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSTimeInterval)startTime hasData:(BOOL)hasData audio:(BOOL)audio customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)stopSdcardWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setRenderViewWithDeviceId:(NSString * _Nonnull)deviceId renderView:(UIView * _Nonnull)renderView customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)reCreateRenderViewWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)removeRenderViewWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setVolumeWithDeviceId:(NSString * _Nonnull)deviceId volume:(float)volume customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (BOOL)getAudioEnableWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getSpeakEnableWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVoiceEffectWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getMagicPixEnableWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getWhiteLightWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)magicPixProcessStateWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (void)reloadAllLivePlayerWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)updateLiveStateWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)sendLiveMessageWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)stopLiveAllWithSkipDeviceModelId:(NSString * _Nullable)skipDeviceModelId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)destroyLiveAllWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)appWillBeKilledWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setVideoZoomEnableWithDeviceId:(NSString * _Nonnull)deviceId enable:(BOOL)enable customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setZoomChangeWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (BOOL)isPlayingWithDeviceId:(NSString * _Nullable)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRecordWithDeviceId:(NSString * _Nonnull)deviceId customParam:(NSDictionary<NSString *, id> * _Nullable)customParam SWIFT_WARN_UNUSED_RESULT;
- (A4xObjcWebRtcPlayer * _Nonnull)getAPLivePlayerWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LiveOtaActionType, open) {
  LiveOtaActionTypeLater = 0,
  LiveOtaActionTypeUptate = 1,
  LiveOtaActionTypeIgonre = 2,
};


SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK10LivePlayer_")
@protocol LivePlayer
@property (nonatomic, readonly, strong) A4xLivePlayerView * _Nonnull playView;
@property (nonatomic, readonly) NSInteger state;
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic, strong) DeviceBean * _Nonnull deviceModel;
@property (nonatomic) NSInteger magicPixProcessState;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) BOOL zoomEnable;
@property (nonatomic) BOOL isRecord;
@property (nonatomic, readonly) CGSize videoSize;
@property (nonatomic, strong) id <LiveAllStateProtocol> _Nullable liveAllStateProtocol;
- (void)startLiveWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setListenerWithLiveStateListener:(id <ILiveStateListener> _Nonnull)liveStateListener;
- (void)startRecordWithPath:(NSString * _Nonnull)path;
- (void)stopRecord;
- (void)screenShotOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, UIImage * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)audioEnableWithEnable:(BOOL)enable;
- (void)speakEnableWithEnable:(BOOL)enable;
- (void)changeVoiceWithType:(NSInteger)type;
- (void)switchHandsetAndSpeakerWithIsHandset:(BOOL)isHandset;
- (void)setAlarmOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setResolutionWithRatio:(NSString * _Nonnull)ratio onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)autoResolutionSwitchEnableWithEnable:(BOOL)enable;
- (void)magicPixEnableWithEnable:(BOOL)enable;
- (void)setWhiteLightWithEnable:(BOOL)enable onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPtzWithX:(float)x y:(float)y onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)addPreLocationPointWithName:(NSString * _Nonnull)name image:(UIImage * _Nonnull)image onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xPresetModel * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)deletePreLocationPointWithPointId:(NSInteger)pointId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)getPreLocationPointsOnSuccess:(void (^ _Nonnull)(NSInteger, NSArray<A4xPresetModel *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPreLocationPointWithCoordinate:(NSString * _Nonnull)coordinate onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)stopLive;
- (void)destroyLive;
- (void)getSdHasVideoDaysWithStartTime:(int64_t)startTime endTime:(int64_t)endTime :(void (^ _Nonnull)(NSInteger, NSArray<HaveRecordDayResponse *> * _Nullable, NSString * _Nonnull))onSuccess :(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)getSDVideoListWithStartTime:(int64_t)startTime stopTime:(int64_t)stopTime :(void (^ _Nonnull)(NSInteger, VideoTimeModelResponse * _Nullable, NSString * _Nonnull))onSuccess :(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)startSdcardWithStartTime:(int64_t)startTime;
- (void)stopSdcard;
- (void)setRenderViewWithRenderView:(UIView * _Nonnull)renderView;
- (void)reCreateRenderView;
- (void)removeRenderView;
- (void)setVolumeWithVolume:(float)volume;
- (BOOL)getAudioEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getSpeakEnable SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVoiceEffect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getMagicPixEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getWhiteLight SWIFT_WARN_UNUSED_RESULT;
- (void)updateLiveState;
- (void)sendLiveMessageWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)appWillBeKilled;
- (void)setZoomChange;
- (A4xObjcWebRtcPlayer * _Nonnull)getAPLivePlayer SWIFT_WARN_UNUSED_RESULT;
- (void)magicPixImageWithImage:(UIImage * _Nullable)image comple:(void (^ _Nonnull)(UIImage * _Nullable))comple;
@end


/// Logger delegate to implement in oder to receive logs from the smart device core sdk.
SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK14LoggerDelegate_")
@protocol LoggerDelegate <NSObject>
- (void)error:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
- (void)warning:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
- (void)info:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
- (void)debug:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
- (void)verbose:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
@end

enum TSMediaAssetExportSessionStatus : NSInteger;

SWIFT_PROTOCOL("_TtP18SmartDeviceCoreSDK18MediaCodecProtocol_")
@protocol MediaCodecProtocol
- (BOOL)turnMp4VideoWithInputPath:(NSString * _Nonnull)inputPath outputPath:(NSString * _Nonnull)outputPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)ts2Mp4WithInputPath:(NSString * _Nonnull)inputPath outputPath:(NSString * _Nonnull)outputPath complete:(void (^ _Nonnull)(enum TSMediaAssetExportSessionStatus, NSString * _Nonnull))complete SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22ModifiableAnyAttribute")
@interface ModifiableAnyAttribute : NSObject
@property (nonatomic) id _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20ModifiableAttributes")
@interface ModifiableAttributes : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, strong) ModifiableAnyAttribute * _Nullable value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC18SmartDeviceCoreSDK12NSLivePlayer")
@interface NSLivePlayer : NSObject <LivePlayer>
@property (nonatomic, weak) id <ILiveStateListener> _Nullable liveStateListener;
@property (nonatomic, weak) id <LiveAllStateProtocol> _Nullable liveAllStateProtocol;
@property (nonatomic, strong) A4xLivePlayerView * _Nonnull playView;
@property (nonatomic, readonly, copy) NSString * _Nullable liveLogPath;
@property (nonatomic, readonly) CGSize videoSize;
@property (nonatomic) NSInteger magicPixProcessState;
@property (nonatomic) NSInteger state;
- (void)setPlayerStateWithNewValue:(NSInteger)newValue;
- (NSInteger)getPlayerState SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) DeviceBean * _Nonnull deviceModel;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) BOOL zoomEnable;
@property (nonatomic, copy) NSString * _Nonnull deviceId;
@property (nonatomic) BOOL isRecord;
- (void)sendLiveMessageWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (nonnull instancetype)initWithDevice:(DeviceBean * _Nonnull)device OBJC_DESIGNATED_INITIALIZER;
- (void)startLiveWithCustomParam:(NSDictionary<NSString *, id> * _Nullable)customParam;
- (void)setListenerWithLiveStateListener:(id <ILiveStateListener> _Nonnull)liveStateListener;
- (void)startRecordWithPath:(NSString * _Nonnull)path;
- (void)stopRecord;
- (void)screenShotOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, UIImage * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)audioEnableWithEnable:(BOOL)enable;
- (void)speakEnableWithEnable:(BOOL)enable;
- (void)changeVoiceWithType:(NSInteger)type;
- (void)switchHandsetAndSpeakerWithIsHandset:(BOOL)isHandset;
- (void)setAlarmOnSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setResolutionWithRatio:(NSString * _Nonnull)ratio onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)autoResolutionSwitchEnableWithEnable:(BOOL)enable;
- (void)magicPixEnableWithEnable:(BOOL)enable;
- (void)setWhiteLightWithEnable:(BOOL)enable onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPtzWithX:(float)x y:(float)y onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)addPreLocationPointWithName:(NSString * _Nonnull)name image:(UIImage * _Nonnull)image onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, A4xPresetModel * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)deletePreLocationPointWithPointId:(NSInteger)pointId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)getPreLocationPointsOnSuccess:(void (^ _Nonnull)(NSInteger, NSArray<A4xPresetModel *> * _Nullable))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)setPreLocationPointWithCoordinate:(NSString * _Nonnull)coordinate onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)stopLive;
- (void)destroyLive;
- (void)getSdHasVideoDaysWithStartTime:(int64_t)startTime endTime:(int64_t)endTime :(void (^ _Nonnull)(NSInteger, NSArray<HaveRecordDayResponse *> * _Nullable, NSString * _Nonnull))onSuccess :(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)getSDVideoListWithStartTime:(int64_t)startTime stopTime:(int64_t)stopTime :(void (^ _Nonnull)(NSInteger, VideoTimeModelResponse * _Nullable, NSString * _Nonnull))onSuccess :(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)startSdcardWithStartTime:(int64_t)startTime;
- (void)stopSdcard;
- (void)setRenderViewWithRenderView:(UIView * _Nonnull)renderView;
- (void)reCreateRenderView;
- (void)removeRenderView;
- (void)setVolumeWithVolume:(float)volume;
- (BOOL)getAudioEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getSpeakEnable SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getVoiceEffect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getMagicPixEnable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getWhiteLight SWIFT_WARN_UNUSED_RESULT;
- (void)updateLiveState;
- (void)appWillBeKilled;
- (void)setZoomChange;
- (A4xObjcWebRtcPlayer * _Nonnull)getAPLivePlayer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSLivePlayer (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <A4xVisionAlgorithmDelegate>
- (void)processVideoStream_yuv:(uint8_t * _Nullable)y u:(uint8_t * _Nullable)u v:(uint8_t * _Nullable)v w:(int32_t)frameWidth h:(int32_t)frameHeight cb:(VideoStreamAlgorithmCallback _Nullable)callback;
@end


@class RTCEncodedImage;
@class RecordPlaySeekPos;
@class DeviceEventReport;

@interface NSLivePlayer (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <A4xDeviceDataPushDelegate, A4xEncodeAVDelegate, A4xLogReportDelegate, A4xOnPlayerStateDelegate>
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onDebug:(NSDictionary * _Nonnull)debugInfo;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onEncodeVideo:(RTCEncodedImage * _Nullable)image;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onEncodeAudio:(NSData * _Nullable)samples rate:(NSInteger)sampeRate channel:(NSInteger)ch;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onLocalAudio:(int16_t * _Nonnull)buffer size:(NSInteger)bufferSize;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onRecordPlaySeek:(RecordPlaySeekPos * _Nullable)seekPos;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onDeviceEventStateReport:(DeviceEventReport * _Nullable)eventReport;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onState:(NSString * _Nonnull)sn state:(A4xObjcWebRtcPlayerState)state error:(A4xErrorCode)errCode;
- (void)mediaplayer:(A4xObjcWebRtcPlayer * _Null_unspecified)player onReport:(NSString * _Null_unspecified)topic report:(ReportInfo * _Null_unspecified)report;
- (void)mediaPlayer:(A4xObjcWebRtcPlayer * _Nonnull)player onStreamStats:(double)recvBitrate;
@end


@interface NSLivePlayer (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (void)updateState;
- (void)enterActiveGround;
- (void)enterBackGround;
- (void)updateWhiteState;
- (void)magicPixImageWithImage:(UIImage * _Nullable)image comple:(void (^ _Nonnull)(UIImage * _Nullable))comple;
- (void)updateSpeedAction;
- (BOOL)checkUpdateShot SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSObject (SWIFT_EXTENSION(SmartDeviceCoreSDK))
/// MARK: NSObject转json字符串
- (NSString * _Null_unspecified)jsonValue SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22NotificationConfigBean")
@interface NotificationConfigBean : NSObject
@property (nonatomic) NSInteger notificationId;
@property (nonatomic) NSInteger userId;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable eventObjects;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSArray<NotificationConfigBean *> * _Nullable subEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22NotificationDetailBean")
@interface NotificationDetailBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK7OTABean")
@interface OTABean : NSObject
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic) NSInteger statusCode;
@property (nonatomic, copy) NSString * _Nullable currentFirmware;
@property (nonatomic, copy) NSString * _Nullable newestFirmwareId;
@property (nonatomic) NSInteger firmwareStatus;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable releaseNote;
@property (nonatomic) NSInteger adminId;
@property (nonatomic, copy) NSString * _Nullable md5;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface OTABean (SWIFT_EXTENSION(SmartDeviceCoreSDK))
- (BOOL)canUpdateWithFirmwareStatus:(NSInteger)firmwareStatus SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isUpdating SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK7OTACore")
@interface OTACore : NSObject
+ (OTACore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)getDeviceOtaDetailWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, OTABean * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
/// 开始OTA
/// @param serialNumber: 设备序列号
/// <hr/>
/// @return onSuccess : OTA成功
/// @return onProgress code : Int OTA进度百分比 例如:50 就是50%
/// @return onError OTA错误
/// 以下是错误码
/// 5 - 超时 - 从收到APP调用otastart 开始计算 10分钟后超时
/// -2002 - 设备未激活
/// -2001 or -2132 - 无权限
/// -3111 - OTA_START_REFUSED - APP端发起OTA操作，但设备（由于电量低等问题）拒绝执行
/// -3112 - OUTDATED_FIRMWARE - 设备固件版本距离最新版本差距过大，需要多次升级
/// -3120 - NO_FIRMWARE - 当前设备型号无固件
- (void)otaStartWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError onProgress:(void (^ _Nonnull)(NSInteger))onProgress;
- (void)getOtaStatusWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(BOOL))onSuccess onProgress:(void (^ _Nonnull)(NSInteger, NSInteger))onProgress onError:(void (^ _Nonnull)(NSInteger))onError;
- (void)otaStop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK18PeerBrowserManager") SWIFT_AVAILABILITY(ios,introduced=14.0)
@interface PeerBrowserManager : NSObject
- (void)startBrowsingWithTypeStr:(NSString * _Nonnull)typeStr;
- (void)stopBrowsing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PlayerStateType, open) {
  PlayerStateTypeLoading = 0,
  PlayerStateTypeNonet = 1,
  PlayerStateTypeOffline = 2,
  PlayerStateTypeLowerShutDown = 3,
  PlayerStateTypeKeyShutDown = 4,
  PlayerStateTypeSolarShutDown = 5,
  PlayerStateTypeSleep = 6,
  PlayerStateTypeUpdating = 7,
  PlayerStateTypeForceUpdate = 8,
  PlayerStateTypeNeedUpdate = 9,
  PlayerStateTypePlaying = 10,
  PlayerStateTypePause = 11,
  PlayerStateTypeTimeout = 12,
  PlayerStateTypeConnectionLimit = 13,
  PlayerStateTypeNotRecvFirstFrame = 14,
  PlayerStateTypeApOffline = 15,
  PlayerStateTypeNoAuth = 16,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK20QuestionFeedBackBean")
@interface QuestionFeedBackBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK10RecordBean")
@interface RecordBean : NSObject
@property (nonatomic, copy) NSString * _Nullable cName;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable cID;
@property (nonatomic, copy) NSString * _Nullable date;
@property (nonatomic, copy) NSString * _Nullable source;
@property (nonatomic, copy) NSString * _Nullable tags;
@property (nonatomic, readonly) BOOL manager;
@property (nonatomic, copy) NSString * _Nullable managerName;
@property (nonatomic, copy) NSString * _Nullable locationName;
@property (nonatomic, copy) NSURL * _Nullable videoURL;
@property (nonatomic, copy) NSString * _Nullable pushInfo;
@property (nonatomic, copy) NSString * _Nullable traceId;
@property (nonatomic, copy) NSString * _Nullable eventInfo;
@property (nonatomic, copy) NSString * _Nullable packageEventInfo;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable eventInfoList;
@property (nonatomic, copy) NSString * _Nullable activityZoneName;
@property (nonatomic, copy) NSString * _Nullable videoEvent;
- (BOOL)isMark SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15RecordEventBean")
@interface RecordEventBean : NSObject
@property (nonatomic, copy) NSString * _Nullable videoEventKey;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable imageUrl;
@property (nonatomic, copy) NSString * _Nullable videoUrls;
@property (nonatomic, copy) NSString * _Nullable libraryIds;
@property (nonatomic, readonly) BOOL manager;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK13SDCardManager")
@interface SDCardManager : NSObject
+ (SDCardManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// 开始OTA
/// @param serialNumber: 设备序列号
/// <hr/>
/// @return onSuccess : OTA成功
/// @return onProgress code : Int OTA进度百分比 例如:50 就是50%
/// @return onError OTA错误
- (void)sdcardFormatWithSerialNumber:(NSString * _Nonnull)serialNumber onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)stopSdcardFormat;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Responsible for handling all delegate callbacks for the underlying session.
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15SessionDelegate")
@interface SessionDelegate : NSObject
/// Initializes the <code>SessionDelegate</code> instance.
///
/// returns:
/// The new <code>SessionDelegate</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns a <code>Bool</code> indicating whether the <code>SessionDelegate</code> implements or inherits a method that can respond
/// to a specified message.
/// \param selector A selector that identifies a message.
///
///
/// returns:
/// <code>true</code> if the receiver implements or inherits a method that can respond to selector, otherwise <code>false</code>.
- (BOOL)respondsToSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSession;
@class NSURLSessionDownloadTask;

@interface SessionDelegate (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <NSURLSessionDownloadDelegate>
/// Tells the delegate that a download task has finished downloading.
/// \param session The session containing the download task that finished.
///
/// \param downloadTask The download task that finished.
///
/// \param location A file URL for the temporary file. Because the file is temporary, you must either
/// open the file for reading or move it to a permanent location in your app’s sandbox
/// container directory before returning from this delegate method.
///
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
/// Periodically informs the delegate about the download’s progress.
/// \param session The session containing the download task.
///
/// \param downloadTask The download task.
///
/// \param bytesWritten The number of bytes transferred since the last time this delegate
/// method was called.
///
/// \param totalBytesWritten The total number of bytes transferred so far.
///
/// \param totalBytesExpectedToWrite The expected length of the file, as provided by the Content-Length
/// header. If this header was not provided, the value is
/// <code>NSURLSessionTransferSizeUnknown</code>.
///
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
/// Tells the delegate that the download task has resumed downloading.
/// \param session The session containing the download task that finished.
///
/// \param downloadTask The download task that resumed. See explanation in the discussion.
///
/// \param fileOffset If the file’s cache policy or last modified date prevents reuse of the
/// existing content, then this value is zero. Otherwise, this value is an
/// integer representing the number of bytes on disk that do not need to be
/// retrieved again.
///
/// \param expectedTotalBytes The expected length of the file, as provided by the Content-Length header.
/// If this header was not provided, the value is NSURLSessionTransferSizeUnknown.
///
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

@class NSURLSessionStreamTask;
@class NSInputStream;
@class NSOutputStream;

SWIFT_AVAILABILITY(tvos,introduced=9.0) SWIFT_AVAILABILITY(macos,introduced=10.11) SWIFT_AVAILABILITY(ios,introduced=9.0)
@interface SessionDelegate (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <NSURLSessionStreamDelegate>
/// Tells the delegate that the read side of the connection has been closed.
/// \param session The session.
///
/// \param streamTask The stream task.
///
- (void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/// Tells the delegate that the write side of the connection has been closed.
/// \param session The session.
///
/// \param streamTask The stream task.
///
- (void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/// Tells the delegate that the system has determined that a better route to the host is available.
/// \param session The session.
///
/// \param streamTask The stream task.
///
- (void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
/// Tells the delegate that the stream task has been completed and provides the unopened stream objects.
/// \param session The session.
///
/// \param streamTask The stream task.
///
/// \param inputStream The new input stream.
///
/// \param outputStream The new output stream.
///
- (void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end

@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSCachedURLResponse;

@interface SessionDelegate (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <NSURLSessionDataDelegate>
/// Tells the delegate that the data task received the initial reply (headers) from the server.
/// \param session The session containing the data task that received an initial reply.
///
/// \param dataTask The data task that received an initial reply.
///
/// \param response A URL response object populated with headers.
///
/// \param completionHandler A completion handler that your code calls to continue the transfer, passing a
/// constant to indicate whether the transfer should continue as a data task or
/// should become a download task.
///
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
/// Tells the delegate that the data task was changed to a download task.
/// \param session The session containing the task that was replaced by a download task.
///
/// \param dataTask The data task that was replaced by a download task.
///
/// \param downloadTask The new download task that replaced the data task.
///
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
/// Tells the delegate that the data task has received some of the expected data.
/// \param session The session containing the data task that provided data.
///
/// \param dataTask The data task that provided data.
///
/// \param data A data object containing the transferred data.
///
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
/// Asks the delegate whether the data (or upload) task should store the response in the cache.
/// \param session The session containing the data (or upload) task.
///
/// \param dataTask The data (or upload) task.
///
/// \param proposedResponse The default caching behavior. This behavior is determined based on the current
/// caching policy and the values of certain received headers, such as the Pragma
/// and Cache-Control headers.
///
/// \param completionHandler A block that your handler must call, providing either the original proposed
/// response, a modified version of that response, or NULL to prevent caching the
/// response. If your delegate implements this method, it must call this completion
/// handler; otherwise, your app leaks memory.
///
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end

@class NSURLAuthenticationChallenge;
@class NSURLCredential;

@interface SessionDelegate (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <NSURLSessionDelegate>
/// Tells the delegate that the session has been invalidated.
/// \param session The session object that was invalidated.
///
/// \param error The error that caused invalidation, or nil if the invalidation was explicit.
///
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
/// Requests credentials from the delegate in response to a session-level authentication request from the
/// remote server.
/// \param session The session containing the task that requested authentication.
///
/// \param challenge An object that contains the request for authentication.
///
/// \param completionHandler A handler that your delegate method must call providing the disposition
/// and credential.
///
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
/// Tells the delegate that all messages enqueued for a session have been delivered.
/// \param session The session that no longer has any outstanding requests.
///
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end

@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLRequest;
@class NSURLSessionTaskMetrics;

@interface SessionDelegate (SWIFT_EXTENSION(SmartDeviceCoreSDK)) <NSURLSessionTaskDelegate>
/// Tells the delegate that the remote server requested an HTTP redirect.
/// \param session The session containing the task whose request resulted in a redirect.
///
/// \param task The task whose request resulted in a redirect.
///
/// \param response An object containing the server’s response to the original request.
///
/// \param request A URL request object filled out with the new location.
///
/// \param completionHandler A closure that your handler should call with either the value of the request
/// parameter, a modified URL request object, or NULL to refuse the redirect and
/// return the body of the redirect response.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
/// Requests credentials from the delegate in response to an authentication request from the remote server.
/// \param session The session containing the task whose request requires authentication.
///
/// \param task The task whose request requires authentication.
///
/// \param challenge An object that contains the request for authentication.
///
/// \param completionHandler A handler that your delegate method must call providing the disposition
/// and credential.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
/// Tells the delegate when a task requires a new request body stream to send to the remote server.
/// \param session The session containing the task that needs a new body stream.
///
/// \param task The task that needs a new body stream.
///
/// \param completionHandler A completion handler that your delegate method should call with the new body stream.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
/// Periodically informs the delegate of the progress of sending body content to the server.
/// \param session The session containing the data task.
///
/// \param task The data task.
///
/// \param bytesSent The number of bytes sent since the last time this delegate method was called.
///
/// \param totalBytesSent The total number of bytes sent so far.
///
/// \param totalBytesExpectedToSend The expected length of the body data.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
/// Tells the delegate that the session finished collecting metrics for the task.
/// \param session The session collecting the metrics.
///
/// \param task The task whose metrics have been collected.
///
/// \param metrics The collected metrics.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Tells the delegate that the task finished transferring data.
/// \param session The session containing the task whose request finished transferring data.
///
/// \param task The task whose request finished transferring data.
///
/// \param error If an error occurred, an error object indicating how the transfer failed, otherwise nil.
///
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15ShareDeviceBean")
@interface ShareDeviceBean : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK15SmartDeviceCore")
@interface SmartDeviceCore : NSObject
+ (SmartDeviceCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isDebug;
/// 初始化SDK
/// config : 配置项
- (void)initSDKWithConfig:(InitSDKConfig * _Nonnull)config onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError SWIFT_METHOD_FAMILY(none);
/// 登录
/// token : 用户令牌
- (void)loginWithToken:(NSString * _Nonnull)token onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)updateLanguageWithLanguage:(NSString * _Nonnull)language onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onError:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onError;
- (void)loginOut;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK17SmartDeviceLogger")
@interface SmartDeviceLogger : NSObject
+ (void)warning:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
+ (void)info:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
+ (void)error:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
+ (void)debug:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
+ (void)verbose:(NSString * _Nonnull)tag message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TSMediaAssetExportSessionStatus, open) {
  TSMediaAssetExportSessionStatusUnknown = 0,
  TSMediaAssetExportSessionStatusWaiting = 1,
  TSMediaAssetExportSessionStatusExporting = 2,
  TSMediaAssetExportSessionStatusCompleted = 3,
  TSMediaAssetExportSessionStatusFailed = 4,
  TSMediaAssetExportSessionStatusCanceled = 5,
};


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK7TagBean")
@interface TagBean : NSObject
@property (nonatomic, copy) NSArray<FilterTagDeviceModel *> * _Nullable devices;
@property (nonatomic, copy) NSArray<FilterAiEventTag *> * _Nullable aiEventTags;
@property (nonatomic, copy) NSArray<FilterAiEventTag *> * _Nullable deviceEventTags;
@property (nonatomic, copy) NSArray<FilterAiEventTag *> * _Nullable operateOptions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The task delegate is responsible for handling all delegate callbacks for the underlying task as well as
/// executing all operations attached to the serial operation queue upon task completion.
SWIFT_CLASS("_TtC18SmartDeviceCoreSDK12TaskDelegate")
@interface TaskDelegate : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface UIView (SWIFT_EXTENSION(SmartDeviceCoreSDK))
@property (nonatomic, readonly) CGFloat minX;
@property (nonatomic, readonly) CGFloat minY;
@property (nonatomic, readonly) CGFloat midX;
@property (nonatomic, readonly) CGFloat midY;
@property (nonatomic, readonly) CGFloat maxX;
@property (nonatomic, readonly) CGFloat maxY;
@property (nonatomic) CGFloat cornerRadius;
@end



SWIFT_CLASS("_TtC18SmartDeviceCoreSDK19VideoAiFeedBackCore")
@interface VideoAiFeedBackCore : NSObject
+ (VideoAiFeedBackCore * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)fetchVideoFeedbackListWithTraceId:(NSString * _Nonnull)traceId onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull, QuestionFeedBackBean * _Nullable))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (void)commitVideoFeedbackWithTraceID:(NSString * _Nonnull)traceID reasionCode:(NSArray<NSNumber *> * _Nonnull)reasionCode remark:(NSString * _Nullable)remark onSuccess:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onSuccess onFail:(void (^ _Nonnull)(NSInteger, NSString * _Nonnull))onFail;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK14VideoTimeModel")
@interface VideoTimeModel : NSObject
- (nonnull instancetype)initWithStart:(int64_t)start end:(int64_t)end OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) int64_t start;
@property (nonatomic) int64_t end;
- (NSString * _Nonnull)log SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK22VideoTimeModelResponse")
@interface VideoTimeModelResponse : NSObject
@property (nonatomic, copy) NSArray<VideoTimeModel *> * _Nullable videoSlices;
@property (nonatomic, strong) VideoTimeModel * _Nullable earliestVideoSlice;
- (nonnull instancetype)initWithVideoSlices:(NSArray<VideoTimeModel *> * _Nullable)videoSlices earliestVideoSlice:(VideoTimeModel * _Nullable)earliestVideoSlice OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18SmartDeviceCoreSDK8ZoneBean")
@interface ZoneBean : NSObject
- (nonnull instancetype)initWithZoneId:(NSInteger)zoneId serialNumber:(NSString * _Nullable)serialNumber zoneName:(NSString * _Nullable)zoneName vertices:(NSString * _Nullable)vertices needPush:(NSInteger)needPush needRecord:(NSInteger)needRecord needAlarm:(NSInteger)needAlarm rectColor:(NSInteger)rectColor errPoint:(NSInteger)errPoint OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSInteger zoneId;
@property (nonatomic, copy) NSString * _Nullable serialNumber;
@property (nonatomic, copy) NSString * _Nullable zoneName;
@property (nonatomic, copy) NSString * _Nullable vertices;
@property (nonatomic) NSInteger needPush;
@property (nonatomic) NSInteger needRecord;
@property (nonatomic) NSInteger needAlarm;
@property (nonatomic) NSInteger rectColor;
@property (nonatomic) NSInteger errPoint;
- (NSArray<NSValue *> * _Nullable)verticesPoints SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)checkFloatPointsArrWithVertices:(NSString * _Nullable)vertices SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)pointsToVerticesWithPoints:(NSArray<NSValue *> * _Nonnull)points SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
